{"version":3,"sources":["ui-objects/Form.js","ui-objects/LinkCtrl.js","ui-objects/RespTable.js","ui-objects/TabControl.js","ui-objects/TabPanel.js","ui-objects/LinkCtrl/LinkCtrl_Button.js","ui-objects/LinkCtrl/LinkCtrl_ButtonBar.js","ui-objects/LinkCtrl/LinkCtrl_Checkbox.js","ui-objects/LinkCtrl/LinkCtrl_Color.js","ui-objects/LinkCtrl/LinkCtrl_File.js","ui-objects/LinkCtrl/LinkCtrl_Number.js","ui-objects/LinkCtrl/LinkCtrl_Radio.js","ui-objects/LinkCtrl/LinkCtrl_Select.js","ui-objects/LinkCtrl/LinkCtrl_Text.js","ui-objects/LinkCtrl/LinkCtrl_TextArea.js"],"names":["Form","[object Object]","I","undefined","console","error","id","ID","this","Dialogs","addMask","document","getElementsByClassName","remove","initForm","f","GetId","closeMask","Location","buttons","warn","replaceWith","footer","Buttons","mask","createElement","className","body","lastChild","insertAdjacentElement","append","addEventListener","e","move","bind","size","Size","style","width","left","window","innerWidth","pageXOffset","top","innerHeight","pageYOffset","innerHTML","header","onInit","onCancel","close","html","Title","HTML","forEach","b","i","insertAdjacentHTML","LinkCtrl","button","m","Moving","Top","StartY","clientY","Left","StartX","clientX","offsetTop","offsetLeft","data","dataType","fileName","DataType","FileName","url","URL","createObjectURL","Blob","type","open","Label","Click","revokeObjectURL","Default","Value","ControlLeft","NewLine","Preserve","change","Change","v","Chain","Index","Disabled","Me","Control","LinkCtrl_Checkbox","LinkCtrl_Text","LinkCtrl_TextArea","LinkCtrl_Number","LinkCtrl_Select","LinkCtrl_Color","LinkCtrl_Radio","LinkCtrl_File","LinkCtrl_Button","LinkCtrl_ButtonBar","span","classes","whiteSpace","title","Icon","icon","Inline","div","Space","Active","Attributes","a","Name","position","Type","filter","Color","Classes","getClass","HasLabel","length","txt","ForceMiddle","c","RightOnly","Last","LeftOnly","container","bindEvents","me","updateValue","setValue","next","nextElementSibling","nodeName","focus","RespTable","Array","Multiple","Headers","Fields","RowNumbers","FullWidth","MaxHeight","Delegate","onSelect","onDelete","onUpdate","NoControls","Length","SelectedIndices","indices","r","Selected","push","bar","buttonBar","Locked","confirmForm","empty","removeRows","up","down","bottom","prepend","OldSelection","OldIndices","target","On","Function","Cancel","index","parentElement","rowIndex","update","Action","headers","O","Status","extractData","cell","h","out","keys","Object","values","findIndex","k","val","table","rows","newArray","found","includes","l","s","temp","splice","unshift","firstChild","display","field","value","action","arg","TabControl","Tabs","LastKey","AutoInit","AnimDuration","AutoScroll","Stack","Layout","AfterDelete","t","Key","Parent","TabPanel","init","key","label","set","array","classList","contains","add","initHeader","initContent","source","Anchors","Header","click","content","Content","Height","clientHeight","Width","clientWidth","Number","getAttribute","getTabIndex","tab","Animate","hasAttribute","deleteConfirm","fold","jumpTo","active","NoAnimation","updateState","addTab","addTabHTML","SetActive","children","ui","deleteTab","tabs","delete","name","rename","Controls","root","initContentInternal","classHeader","appendControls","o","dom","HeaderOnly","animate","C","as","split","time","getAnimTransform","duration","iterations","fill","onfinish","scrollIntoView","behavior","block","inline","state","from","transform","height","opacity","to","super","Button","node","outerHTML","Spacing","n","new","disable","enable","newVal","checked","DOMlist","replace","Form_Color","Caller","after","backgroundColor","Accept","DragMsg","msg","multiple","accept","fileInfo","dropMsg","input","clear","previousElementSibling","drop","files","preventDefault","dataTransfer","valid","formatSupported","format","endsWith","diff","plural","Min","Infinity","Max","Step","htmlInput","color","min","max","disabled","List","labels","newValue","item","selected","isNaN","oldLabel","NavBar","Lookup","Query","Values","LastVisited","middle","htmlInternal","htmlLookup","htmlOptions","selectedIndex","lookup","text","timeout","setTimeout","LU","query","p","Promise","resolve","result","RG","RegExp","test","clearTimeout","then","back","previousSibling","first","nextSibling","last","list","select"],"mappings":"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","file":"ui.min.js","sourcesContent":["//*********************************************************************************\n// FORM object - Object representing a form that will pop-up to request user inputs\n//*********************************************************************************\nclass Form {\n\tconstructor() {}\n\t//Static Methods\n\tstatic open(I) { //Open the form with the provided options: ID, Title, Size, Buttons, HTML, OnInit\n\t\tif(I === undefined) {console.error(\"No options provided to Form.open(). Aborted\"); return} //Check for options\n\t\tlet id = I.ID;\n\t\tif(id === undefined || id === \"\") {console.error(\"No id provided to Form.open(). Aborted\"); return} //Check for id\n\t\tif(this.Dialogs) { //Property already defined, add the mask only if no dialog opened\n\t\t\tif(this.Dialogs == 0) {this.addMask()}\n\t\t\tthis.Dialogs++;\n\t\t}\n\t\telse { //First use, create the static property and add the mask\n\t\t\tthis.Dialogs = 1;\n\t\t\tthis.addMask();\n\t\t}\n\t\tif(this.Dialogs > 1) { //Remove the mask and append a new one to allow only the last form to be active\n\t\t\tdocument.getElementsByClassName(\"Form_Mask\")[0].remove();\n\t\t\tthis.addMask(); //Calling this method ensures the mask is after the previous form and will have the move event attached\n\t\t}\n\t\tthis.initForm(I); //Create the form\n\t}\n\tstatic close(id) { //Close the form with the provided id\n\t\tif(id === undefined || id === \"\") {console.error(\"No options provided to Form.close(). Aborted\"); return} //Check for id\n\t\tlet f = GetId(id);\n\t\tif(f) {f.remove()} //Remove the form if it exists\n\t\tthis.closeMask(); //Remove the mask\n\t\tif(this.Dialogs) { \n\t\t\tthis.Dialogs--;\n\t\t\tif(this.Dialogs > 0) {this.addMask({Location: \"beforebegin\"})} //If there are remaining forms, add the mask before the last form\n\t\t}\n\t}\n\tstatic replaceButtons(id, buttons) { //Replace the buttons of the form with the provided id, using the new buttons provided in input (array of button objects)\n\t\tlet f = GetId(id);\n\t\tif(f === null) {console.warn(\"Form '\" + id + \"' not accessible for buttons replacement\"); return this}\n\t\tif(buttons === undefined) {buttons = []}\n\t\tlet footer = f.getElementsByClassName(\"Form_Footer\");\n\t\tfooter[0].replaceWith(this.footer({ID: id, Buttons: buttons}));\n\t}\n\t//These methods are for internal use and should not be called directly\n\tstatic addMask(I) { //Create a mask in the document to create the background and give modal effect\n\t\tlet mask = document.createElement(\"div\");\n\t\tmask.className = \"Form_Mask\";\n\t\tif(I && I.Location) {document.body.lastChild.insertAdjacentElement(I.Location, mask)} //Location provided\n\t\telse {document.body.append(mask)} //Default\n\t\tmask.addEventListener(\"mousemove\", function(e) {this.move(e)}.bind(this)); //Move event taken over by the mask, in case the movement from the header are too fast\n\t}\n\tstatic closeMask() { //Remove the mask to free the page\n\t\tlet mask = document.getElementsByClassName(\"Form_Mask\")[0];\n\t\tif(mask) {mask.remove()}\n\t}\n\tstatic initForm(I) { //Create the div that will host the form\n\t\tlet f = document.createElement(\"div\");\n\t\tf.className = \"Form_Wrapper\";\n\t\tf.id = I.ID;\n\t\tlet size = (I.Size || 400);\n\t\tf.style.width = size + \"px\";\n\t\tf.style.left = ((window.innerWidth - size) / 2) + window.pageXOffset + (15 * (this.Dialogs - 1)) + \"px\"; //Position the form at the center of the page, with an offset in case of multiple forms\n\t\tf.style.top = (window.innerHeight / 4) + window.pageYOffset + (15 * (this.Dialogs - 1)) + \"px\"; //Position the form close to the top, with an offset in case of multiple forms\n\t\tf.innerHTML = this.header(size, I) + this.body(I);\n\t\tf.append(this.footer(I)); //Footer is created as a node and added\n\t\tdocument.body.append(f); //Add the element to the page\n\t\tif(I.onInit) {I.onInit()} //User function to run on opening the dialog\n\t\tf.getElementsByClassName(\"Form_Closure\")[0].addEventListener(\"click\", function() { //Add a closure event on the red cross button in the right corner\n\t\t\tif(I.onCancel) {I.onCancel()}\n\t\t\tForm.close(f.id);\n\t\t});\n\t\tf.getElementsByClassName(\"Form_Header\")[0].addEventListener(\"mousemove\", function(e) {this.move(e, f)}.bind(this)); //Move event on the header\n\t\tf.addEventListener(\"mousemove\", function(e) {this.move(e)}.bind(this)); //Move event on the form div to take over mouse movements too fast and \"spilling over\"\n\t}\n\tstatic header(size, I) { //Header of the form. Receives the options as well as the desired width for the form\n\t\tlet html = \"<div class=\\\"Form_Header\\\">\";\n\t\tif(I.Title) { //Title of the dialog\n\t\t\tlet w = size - 50; //Leave some space for the closure\n\t\t\thtml += \"<div class=\\\"Form_Title\\\" style=\\\"width: \" + w + \"px\\\">\" + I.Title + \"</div>\";\n\t\t}\n\t\thtml += \"<div class=\\\"Form_Closure\\\" title=\\\"Close\\\">&times;</div>\";\n\t\thtml += \"</div>\";\n\t\treturn html;\n\t}\n\tstatic body(I) { //Form body\n\t\tlet html = \"<div class=\\\"Form_Body\\\">\";\n\t\tif(I.HTML) {html += I.HTML}\n\t\thtml += \"</div>\";\n\t\treturn html;\n\t}\n\tstatic footer(I) { //Footer section with buttons. Created as a node because buttons have functions attached to them\n\t\tlet footer = document.createElement(\"div\");\n\t\tfooter.className = \"Form_Footer\";\n\t\tfooter.id = I.ID + \"Form_Footer\";\n\t\tif(I.Buttons) {\n\t\t\tI.Buttons.forEach(function(b, i) {\n\t\t\t\tif(i > 0) {footer.insertAdjacentHTML(\"beforeend\", \"&nbsp;\")} //To space the buttons evenly\n\t\t\t\tfooter.append(LinkCtrl.button(b));\n\t\t\t});\n\t\t}\n\t\treturn footer;\n\t}\n\tstatic move(e, f) { //Move the form f following mouse position in event e\n\t\tif(e.buttons == 1) {\n\t\t\tlet m = this.Moving;\n\t\t\tif(m) {\n\t\t\t\tlet f = this.Moving.Form;\n\t\t\t\tf.style.top = (m.Top - (m.StartY - e.clientY)) + \"px\";\n\t\t\t\tf.style.left = (m.Left - (m.StartX - e.clientX)) + \"px\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif(f) {\n\t\t\t\t\tthis.Moving = {StartX: e.clientX, StartY: e.clientY, Top: f.offsetTop, Left: f.offsetLeft, Form: f}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {this.Moving = undefined}\n\t}\n\tstatic download(data, I) { //Open a form providing a link allowing download of the data\n\t\tlet dataType = \"text/plain;charset=utf-8\";\n\t\tlet fileName = \"download.txt\";\n\t\tif(I.DataType) {dataType = I.DataType}\n\t\tif(I.FileName) {fileName = I.FileName}\n\t\tlet url = URL.createObjectURL(new Blob([data], {type: dataType}));\n\t\tlet id = \"Form_Download\";\n\t\tForm.open({\n\t\t\tID: id,\n\t\t\tHTML: \"<p>Click on the link below to download and save your file:</p><p style=\\\"text-align: center;\\\"><a href=\\\"\" + url + \"\\\" download=\\\"\" + fileName + \"\\\">\" + fileName + \"</a></p>\",\n\t\t\tTitle: \"Download file\",\n\t\t\tButtons: [{Label: \"Close\", Click: function() {URL.revokeObjectURL(url); Form.close(id)}}], //Revoke the URL has it is no longer useful\n\t\t});\n\t}\n}","//***********************************************************************************************\n// LINKCTRL object - Extension of the HTML controls for direct interaction with object properties\n//***********************************************************************************************\nclass LinkCtrl {\n\tconstructor(I) {\n\t\tthis.ID = I.ID; //ID of the html element containing the control\n\t\tthis.Default = I.Default; //Default value of the control upon initialization\n\t\tthis.Value = I.Default; //Keeping the value in the object ensures that it can be recovered even after the html control is destroyed\n\t\tthis.Title = (I.Title || \"\"); //Text used to populate the title field of the label\n\t\tthis.Label = (I.Label || \"\"); //Test used as label for the control\n\t\tthis.ControlLeft = (I.ControlLeft || false);//Whether the control should be at the left of the label, instead of the right\n\t\tthis.NewLine = (I.NewLine || false); //Whether to go to the next line AFTER this control\n\t\tthis.Preserve = (I.Preserve || false); //Whether to preserve previous content or not.\n\t\tthis.change = (I.Change || function(v) {}.bind(this)); //Additional function to run in case the value of the control is changed. The function will receive the new value\n\t\tthis.Chain = I.Chain; //An object composed of the mandatory \"Index\" property and optional \"Last\" property, to control the chaining. If undefined, the chaining is off (standalone control)\n\t\tif(this.Chain) {this.Index = this.Chain.Index} //In case of chaining, the index of the control in the chain.\n\t\telse { //Defining an index allow to chain elements by \"sticking\" them together in a control bar. Useful for vertical layout\n\t\t\tif(I.Index && I.Index > -1) {this.Index = I.Index}\n\t\t\telse {this.Index = 0}\n\t\t}\n\t\tthis.Disabled = I.Disabled; //To init the control in a disable stage\n\t\tthis.Me = this.ID + \"_\" + this.Index;\n\t\tthis.Control = this.Me + \"_Control\";\n\t}\n\t//Static methods\n\tstatic new(type, I) { //Create a new LnkCtrl object of the desired type\n\t\tif(I === undefined) {console.error(\"Required options missing for LinkCtrl. Aborted.\"); return} //Check for required options\n\t\tif(I.ID === undefined || I.ID == \"\") {console.error(\"Required ID missing for LinkCtrl. Aborted.\"); return}\n\t\tif(type != \"Button\" && type != \"ButtonBar\" && I.Default === undefined) { //Default value required, except for buttons\n\t\t\tconsole.error(\"Required default value missing for LinkCtrl. Aborted.\");\n\t\t\treturn;\n\t\t}\n\t\tswitch(type) { //Create the desired element\n\t\t\tcase \"Checkbox\": return new LinkCtrl_Checkbox(I);\n\t\t\tcase \"Text\": return new LinkCtrl_Text(I);\n\t\t\tcase \"TextArea\": return new LinkCtrl_TextArea(I);\n\t\t\tcase \"Number\": return new LinkCtrl_Number(I);\n\t\t\tcase \"Select\": return new LinkCtrl_Select(I);\n\t\t\tcase \"Color\": return new LinkCtrl_Color(I);\n\t\t\tcase \"Radio\": return new LinkCtrl_Radio(I);\n\t\t\tcase \"File\": return new LinkCtrl_File(I);\n\t\t\tcase \"Button\": return new LinkCtrl_Button(I);\n\t\t\tcase \"ButtonBar\": return new LinkCtrl_ButtonBar(I);\n\t\t\tdefault: //Exit if the type is unknown\n\t\t\t\tconsole.error(\"Unknown type requested for LinkCtrl (\" + type + \"). Aborted.\");\n\t\t\t\treturn;\n\t\t}\n\t}\n\t//***************\n\t//DEPRECATED: USE THE LINKCTRL.NEW IMPLEMENTATION INSTEAD\n\t//***************\n\tstatic button(I) { //Output the node for a button with the desired options: ID, Title, Label, Disabled, Click, Icon\n\t\tif(I === undefined) {console.error(\"Required options missing for Button. Aborted.\"); return} //Check for required options\n\t\tvar span = document.createElement(\"span\"); //Spawn the node for the button\n\t\tvar classes = \"LinkCtrl LinkCtrl_Round\";\n\t\tif(I.Disabled) {classes += \" LinkCtrl_Disabled\"}\n\t\telse {classes += \" LinkCtrl_Resting\"}\n\t\tspan.style.whiteSpace = \"pre\";\n\t\tspan.className = classes; //Add the class to the element\n\t\tif(I.ID) {span.id = I.ID}\n\t\tif(I.Title) {span.title = I.Title}\n\t\tif(I.Label) {span.innerHTML = I.Label}\n\t\tif(I.Icon) {\n\t\t\tlet icon = this.icon(I.Icon); //Generate the icon html\n\t\t\tif(I.Icon.Left) {span.insertAdjacentHTML(\"afterbegin\", icon)} //Icon first\n\t\t\telse {span.insertAdjacentHTML(\"beforeend\", icon)} //Icon last\n\t\t}\n\t\tif(I.Click && !I.Disabled) { //Attach the event if defined and the button is not disabled\n\t\t\tspan.addEventListener(\"click\", I.Click);\n\t\t}\n\t\treturn span;\n\t}\n\tstatic buttonBar(I, Inline) { //Output the nodes for a bar of buttons with the desired options: Buttons\n\t\tif(I === undefined) {console.error(\"Required buttons missing for button bar. Aborted.\"); return} //Check for required options\n\t\tvar div = document.createElement(\"div\"); //Spawn the container node\n\t\tif(Inline) {div.className = \"LinkCtrl_Inline\"}\n\t\tI.forEach(function(b, i) {\n\t\t\tif(i > 0) {div.insertAdjacentHTML(\"beforeend\", \" \")} //To space the buttons evenly\n\t\t\tdiv.append(this.button(b));\n\t\t}, this);\n\t\treturn div;\n\t}\n\t//***************\n\t//***************\n\t//***************\n\tstatic icon(I) { //Create the html needed to display an icon, based on the provided options\n\t\tlet html = \"\";\n\t\tif(I.Space) {html += \"&nbsp;\"}\n\t\thtml += \"<span class=\\\"LinkCtrl_Icon\"; //Mind the initial space\n\t\tif(I.Active !== undefined) {\n\t\t\tif(I.Active) {html += \" LinkCtrl_IconActive\"}\n\t\t\telse {html += \" LinkCtrl_IconResting\"}\n\t\t}\n\t\tswitch(I.Size) {\n\t\t\tcase \"Big\": html += \" LinkCtrl_IconBig\"; break;\n\t\t\tcase \"Medium\": html += \" LinkCtrl_IconMedium\"; break;\n\t\t\tdefault: html += \" LinkCtrl_IconSmall\"; break;\n\t\t}\n\t\thtml += \"\\\"\";\n\t\tif(I.Title) {html += \" title=\\\"\" + I.Title + \"\\\"\"}\n\t\tif(I.Attributes) { //Custom attributes with values can be added\n\t\t\tI.Attributes.forEach(function(a) {\n\t\t\t\thtml += \" \" + a.Name + \"=\\\"\" + a.Value + \"\\\"\";\n\t\t\t});\n\t\t}\n\t\tlet position = \"\";\n\t\tswitch(I.Type) {\n\t\t\tcase \"Reset\": position = \"0px 0px\"; break;\n\t\t\tcase \"Setting\": position = \"-50px 0px\"; break;\n\t\t\tcase \"Zoom\": position = \"-100px 0px\"; break;\n\t\t\tcase \"Move\": position = \"-150px 0px\"; break;\n\t\t\tcase \"Delete\": position = \"-200px 0px\"; break;\n\t\t\tcase \"Edit\": position = \"0px -50px\"; break;\n\t\t\tcase \"Tag\": position = \"-50px -50px\"; break;\n\t\t\tcase \"Ok\": position = \"-100px -50px\"; break;\n\t\t\tcase \"Cancel\": position = \"-150px -50px\"; break;\n\t\t\tcase \"Back\": position = \"-200px -50px\"; break;\n\t\t\tcase \"Up\": position = \"0px -100px\"; break;\n\t\t\tcase \"Down\": position = \"-50px -100px\"; break;\n\t\t\tcase \"Bottom\": position = \"-100px -100px\"; break;\n\t\t\tcase \"Top\": position = \"-150px -100px\"; break;\n\t\t\tcase \"Load\": position = \"-200px -100px\"; break;\n\t\t\tcase \"Save\": position = \"0px -150px\"; break;\n\t\t\tcase \"ZoomOut\": position = \"-50px -150px\"; break;\n\t\t\tcase \"ZoomIn\": position = \"-100px -150px\"; break;\n\t\t\tcase \"New\": position = \"-150px -150px\"; break;\n\t\t\tcase \"Warning\": position = \"-200px -150px\"; break;\n\t\t\tcase \"Left\": position = \"0px -200px\"; break;\n\t\t\tcase \"Right\": position = \"-50px -200px\"; break;\n\t\t\tcase \"Last\": position = \"-100px -200px\"; break;\n\t\t\tcase \"First\": position = \"-150px -200px\"; break;\n\t\t\tdefault: position = \"-200px -200px\"; break; //Last slot is a blank icon\n\t\t}\n\t\tlet filter = \"\";\n\t\tswitch(I.Color) {\n\t\t\tcase \"Red\": filter = \" filter: sepia(100%) saturate(1500%)\"; break;\n\t\t\tcase \"Green\": filter = \" filter: sepia(100%) saturate(2000%) hue-rotate(100deg)\"; break;\n\t\t\tcase \"Yellow\": filter = \" filter: sepia(50%) hue-rotate(15deg) saturate(5000%)\"; break;\n\t\t\tdefault: break;\n\t\t}\n\t\thtml += \"style=\\\"background-position: \" + position + \";\" + filter + \"\\\"></span>\";\n\t\treturn html;\n\t}\n\t//Getter\n\tget Classes() { //Returns a text representing the classes to be added to the label hosting the control\n\t\treturn this.getClass();\n\t}\n\tget HasLabel() { //Whether a text has been provided as label\n\t\treturn (this.Label.length > 0); \n\t}\n\t//Methods\n\tgetClass(I) { //Returns a text representing the classes to be added to the label hosting the control. Can be provided options for proper control\n\t\tlet txt = \"\";\n\t\tif(this.Type == \"Checkbox\" && this.Value) {txt += \" LinkCtrl_Active\"} //For active checkbox\n\t\telse { //Normal case\n\t\t\tif(this.Disabled) {txt += \" LinkCtrl_Disabled\"}\n\t\t\telse {txt += \" LinkCtrl_Resting\"}\n\t\t}\n\t\tif(I && I.ForceMiddle) {return txt} //From here on, process the rounding effects based on the position of the control in the chain\n\t\tlet c = this.Chain;\n\t\tif(c) { //Chaining\n\t\t\tif(c.Index == 0 || c.NewLine) { //First element in the chain\n\t\t\t\tif(I === undefined || I.RightOnly === undefined) {txt += \" LinkCtrl_RoundL\"}\n\t\t\t}\n\t\t\telse {txt += \" LinkCtrl_Chain\"} //Note: currently, this css class is empty\n\t\t\tif(c.Last) { //Last element in the chain\n\t\t\t\tif(I && I.LeftOnly) {return txt}\n\t\t\t\telse {txt += \" LinkCtrl_RoundR\"}\n\t\t\t} \n\t\t}\n\t\telse { //No chaining, standalone control\n\t\t\tif(I && I.RightOnly) {txt += \" LinkCtrl_RoundR\"}\n\t\t\telse {\n\t\t\t\tif(I && I.LeftOnly) {txt += \" LinkCtrl_RoundL\"}\n\t\t\t\telse {txt += \" LinkCtrl_Round\"} //Default case\n\t\t\t}\n\t\t}\n\t\treturn txt;\n\t}\n\tinit() { //Initialize the control on the page by appending the html in the ID container\n\t\tlet container = GetId(this.ID);\n\t\tif(container === null || container === undefined) { //Do nothing if the container does not exist\n\t\t\tconsole.warn(\"DOM element for LinkCtrl not found, init() method aborted\");\n\t\t\treturn this;\n\t\t}\n\t\tlet html = this.html();\n\t\tif(this.Chain && this.Chain.NewLine) {html = \"<br>\" + this.html()}\n\t\tif(this.Chain && this.Index > 0) {container.insertAdjacentHTML(\"beforeend\", html)} //Chaining, preserve previous content\n\t\telse {\n\t\t\tif(this.Preserve) {container.insertAdjacentHTML(\"beforeend\", html)} //Preserve previous content\n\t\t\telse {container.innerHTML = html} //erase\n\t\t}\n\t\tthis.bindEvents();\n\t\treturn this; //For chaining, with .change() in particular\n\t}\n\tbindEvents() {console.warn(\"bindEvents function not defined for this control; no events attached\")} //Attach the events to the control. Specific to each control and added here only as default fallback\n\tsetValue(v) { //Set the value of the control, updating the html classes if possible\n\t\tlet me = GetId(this.Me);\n\t\tthis.updateValue(v, me);\n\t\treturn this;\n\t}\n\tgetValue() { //Return the value of the control. Identical to calling obj.Value, but added for consistency with the setValue() method\n\t\treturn this.Value;\n\t}\n\tsetDefault(v) { //Set the default value of the control, wihtout changing its value by itself\n\t\tthis.Default = v;\n\t\treturn this;\n\t}\n\tdefault() { //Set the value of the control to its defaults\n\t\treturn this.setValue(this.Default);\n\t}\n\tremove() { //Remove the element from the page. For elements with NewLine = true, the <br> will also be deleted\n\t\tlet me = GetId(this.Me);\n\t\tif(me === null) {return this} //Nothing to do if this control does not exist on the page\n\t\tif(this.NewLine === true) { \n\t\t\tlet next = me.nextElementSibling\n\t\t\tif(next.nodeName == \"BR\") {next.remove()} //Check that we are indeed targeting a br before removing anything important...\n\t\t}\n\t\tme.remove(); //Delete the element\n\t\treturn this;\n\t}\n\tfocus() { //Set the focus to the element. This uses the native focus() of the browser and results may vary...\n\t\tlet me = GetId(this.Me);\n\t\tif(me) {me.focus()}\n\t\treturn this;\n\t}\n}","//***********************************************************\n// RESPTABLE object - Responsive Tables object representation\n//***********************************************************\nclass RespTable {\n\tconstructor(I) {\n\t\tthis.ID = I.ID; //ID of the html element containing the control\n\t\tthis.Array = (I.Array || []); //The array of array/object in use to populate the table, and that will be controlled internally\n\t\tthis.Multiple = (I.Multiple || false); //Whether multiple selection is allowed on this table or not. This will also enable unselection and possibly no selection at all\n\t\tthis.Headers = I.Headers; //An array of headers for the columns\n\t\tthis.Fields = I.Fields; //An array of fields, corresponding to attribute names to use from the objects within this Array. These will also be used as default headers if none were provided\n\t\tthis.RowNumbers = I.RowNumbers; //Whether the table has a first column for row numbering. If true, this index will be added and maintained internally\n\t\tthis.FullWidth = I.FullWidth; //Whether the table should occupy the full width of its parent container\n\t\tthis.MaxHeight = (I.MaxHeight || 250); //Maximum height (in px) of the table bloc\n\t\tthis.Delegate = I.Delegate; //An object used to delegate click events to a function (Format: {Function: function(event) {}, On: \"DIV\", Cancel: false}), Aplies on the node type provided. Cancel selection event if needed\n\t\tthis.onSelect = I.onSelect; //What to do after item selection. The function will receive the selected items, the previously selected items, as well as their indices; as arrays (empty array if nothing is selected)\n\t\tthis.onDelete = I.onDelete; // What to do on deletion. The function will receive the deleted item\n\t\tthis.onUpdate = I.onUpdate; //What to do after the table html has been updated. The function will receive an object {Action: \"\"} indicating the action leading to the update\n\t\tthis.Preserve = I.Preserve; //Keep previous content in the hosting ID or not\n\t\tthis.NoControls = I.NoControls; //If true, the table should not show its control at the top\n\t\tthis.Me = this.ID + \"_RespTable\"; //ID of the html table\n\t\treturn this;\n\t}\n\t//Getter\n\tget Length() { //Return the current number of data rows\n\t\treturn this.Array.length;\n\t}\n\tget SelectedIndices() { //Return an array containing the indices of the selected elements\n\t\tlet indices = [];\n\t\tthis.Array.forEach(function(r, i) {\n\t\t\tif(r.Selected) {indices.push(i)}\n\t\t});\n\t\treturn indices;\n\t}\n\tget Selected() { //Return an array containing the objects (elements within Array) at the selected indices\n\t\treturn this.Array.filter(function(a) {return a.Selected});\n\t}\n\t//Methods\n\tinit() { //Initialize the table\n\t\tlet container = GetId(this.ID);\n\t\tif(container === null || container === undefined) {return this} //Check\n\t\tlet html = \"<div\";\n\t\tif(this.MaxHeight > 0) {html += \" style=\\\"max-height: \" + this.MaxHeight + \"px; overflow: auto\\\"\"}\n\t\thtml += \"><table id=\\\"\" + this.Me + \"\\\" class=\\\"RespTable\\\"\";\n\t\tif(this.FullWidth) {html += \" style=\\\"width: 100%\\\"\"}\n\t\thtml += \">\";\n\t\thtml += this.html(); //The html of the table\n\t\thtml += \"</table></div>\";\n\t\tif(this.Preserve) {container.insertAdjacentHTML(\"beforeend\", html)} //Append to prior contents\n\t\telse {container.innerHTML = html} //Erase previous contents\n\t\tthis.bindEvents(); //Attach the selection event\n\t\tif(!this.NoControls) { //Show controls for the table\n\t\t\tlet bar = LinkCtrl.buttonBar([ //To manipulate the inputs\n\t\t\t\t{Label: \"\", Title: \"Remove all items\", Icon: {Type: \"Reset\"}, Click: function() {\n\t\t\t\t\tif(this.Locked) {return}\n\t\t\t\t\tthis.confirmForm(\"RESET\", this.empty.bind(this));\n\t\t\t\t}.bind(this)},\n\t\t\t\t{Label: \"\", Title: \"Remove selected item\", Icon: {Type: \"Delete\"}, Click: function() {\n\t\t\t\t\tif(this.Locked) {return}\n\t\t\t\t\tthis.confirmForm(\"DELETE\", this.removeRows.bind(this), this.SelectedIndices);\n\t\t\t\t}.bind(this)},\n\t\t\t\t{Label: \"\", Title: \"Move selected item up\", Icon: {Type: \"Up\"}, Click: function() {\n\t\t\t\t\tif(this.Locked) {return}\n\t\t\t\t\tthis.up();\n\t\t\t\t}.bind(this)},\n\t\t\t\t{Label: \"\", Title: \"Move selected item down\", Icon: {Type: \"Down\"}, Click: function() {\n\t\t\t\t\tif(this.Locked) {return}\n\t\t\t\t\tthis.down();\n\t\t\t\t}.bind(this)},\n\t\t\t\t{Label: \"\", Title: \"Move selected item to the top\", Icon: {Type: \"Top\"}, Click: function() {\n\t\t\t\t\tif(this.Locked) {return}\n\t\t\t\t\tthis.top();\n\t\t\t\t}.bind(this)},\n\t\t\t\t{Label: \"\", Title: \"Move selected item to the bottom\", Icon: {Type: \"Bottom\"}, Click: function() {\n\t\t\t\t\tif(this.Locked) {return}\n\t\t\t\t\tthis.bottom();\n\t\t\t\t}.bind(this)},\n\t\t\t]);\n\t\t\tcontainer.prepend(bar); //Buttons to control the input table\n\t\t}\n\t\treturn this;\n\t}\n\tbindEvents() { //Attach events to the table\n\t\tGetId(this.Me).addEventListener(\"click\", function(e) {\n\t\t\tif(this.Locked) {return}\n\t\t\tlet OldSelection = this.Selected; //Selected elements at the moment of the click\n\t\t\tlet OldIndices = this.SelectedIndices;\n\t\t\tlet target = e.target;\n\t\t\tif(this.Delegate) {\n\t\t\t\tif(target.nodeName == this.Delegate.On) {this.Delegate.Function(e)}\n\t\t\t\tif(this.Delegate.Cancel) {return} //Prevent downstream execution of row selection\n\t\t\t}\n\t\t\tif(target.nodeName == \"TH\") {return}\n\t\t\tif(target.nodeName == \"TD\") {var index = target.parentElement.rowIndex - 1}\n\t\t\telse {var index = target.parentElement.parentElement.rowIndex - 1} //It is assumed here that climbing back only one level is sufficient to reach the td\n\t\t\tif(this.Multiple) {this.Array[index].Selected = !this.Array[index].Selected}\n\t\t\telse {\n\t\t\t\tthis.Array.forEach(function(r, i) {\n\t\t\t\t\tif(i == index) {r.Selected = true}\n\t\t\t\t\telse {r.Selected = false}\n\t\t\t\t});\n\t\t\t}\n\t\t\tthis.update({Action: \"Select\"});\n\t\t\tif(this.onSelect) {this.onSelect(this.Selected, OldSelection, this.SelectedIndices, OldIndices)}\n\t\t}.bind(this));\n\t}\n\thtml() { //Create the html of the table using the internal Array as data source\n\t\tlet html = this.headers(); //Prepare the headers\n\t\tif(this.Array === undefined) {return html}\n\t\tthis.Array.forEach(function(O, i) { //Loop the internal array to create the rows\n\t\t\thtml += \"<tr class=\\\"RespTable_Row\"; //Each row will have a selectable behavior through this class\n\t\t\tif(O.Selected) { //If the option is provided, chech within the array and add the selected class as required\n\t\t\t\thtml += \" RespTable_Selected\";\n\t\t\t}\n\t\t\tif(O.Status && O.Status == \"Error\") {html += \" RespTable_Error\"}\n\t\t\thtml += \"\\\">\";\n\t\t\tif(this.RowNumbers) {html += \"<td>\" + (i + 1) + \"</td>\"}\n\t\t\tlet row = this.extractData(O); //Extract data from the object\n\t\t\trow.forEach(function(cell) { //Add the content for each cell\n\t\t\t\thtml += \"<td>\" + cell + \"</td>\";\n\t\t\t});\n\t\t\thtml += \"</tr>\";\n\t\t}, this);\n\t\treturn html;\n\t}\n\theaders() { //Prepare the headers for the array\n\t\tif(this.Headers) {var headers = this.Headers} //Headers were directly provided\n\t\telse {\n\t\t\tif(this.Fields) {var headers = this.Fields} //Headers are fields from object\n\t\t\telse {return \"\"} //No headers available, leave\n\t\t}\n\t\tvar html = \"<tr>\"; //Start a header row\n\t\tif(this.RowNumbers) {html += \"<th>#</th>\"}\n\t\theaders.forEach(function(h) { //Add the provided headers\n\t\t\thtml += \"<th>\" + h + \"</th>\";\n\t\t});\n\t\thtml += \"</tr>\";\n\t\treturn html;\n\t}\n\textractData(O) { //Extract the desired data from the input object and return them as a readable array\n\t\tif(this.Fields) { //In this case, an object is expected, so lookup for the attribute name supplied and returns the value\n\t\t\tvar out = [];\n\t\t\tvar keys = Object.keys(O);\n\t\t\tvar values = Object.values(O);\n\t\t\tthis.Fields.forEach(function(f) {\n\t\t\t\tlet index = keys.findIndex(function(k) {return(k == f)});\n\t\t\t\tlet val = values[index];\n\t\t\t\tif(index > -1) {\n\t\t\t\t\tif(f == \"Color\" || f == \"color\") {out.push(\"<span style=\\\"background-color: \" + val + \"; border: 1px solid black\\\">&nbsp;&nbsp;&nbsp;&nbsp;</span>\")} //Colors get special treatment\n\t\t\t\t\telse {\n\t\t\t\t\t\tif(typeof(val) == \"boolean\") { //Booleans are outputed with a symbol\n\t\t\t\t\t\t\tif(val) {out.push(\"<span style=\\\"color: darkgreen; font-weight: bold;\\\">&check;</span>\")}\n\t\t\t\t\t\t\telse {out.push(\"<span style=\\\"color: tomato; font-weight: bold;\\\">&cross;</span>\")}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {out.push(val)}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {out.push(\"\")} //Ensure correct ordering in case the field is not found\n\t\t\t});\n\t\t\treturn out;\n\t\t}\n\t\telse {return O} //In this case, an array is expected so it can be returned as is\n\t}\n\tupdate(I) { //Update the html table\n\t\tlet table = GetId(this.Me);\n\t\tif(table === null || table === undefined) {return this} //Check\n\t\ttable.innerHTML = this.html(); //Replace html\n\t\tif(this.onUpdate) (this.onUpdate(I));\n\t\treturn this;\n\t}\n\taddRow(O) { //Add a row to the table with a new cell per element in array\n\t\tthis.Array.push(O); //Update internal array\n\t\tthis.update({Action: \"Add Row\"}); //Update the table\n\t\treturn O;\n\t}\n\tremoveRows(rows) { //Remove the rows with indices given in the provided array rows\n\t\tlet l = rows.length;\n\t\tif(l == 0) {return this} //No items\n\t\tlet newArray = this.Array.filter(function(a, i) { //Filter the array for elements with indices not matching the ones provided\n\t\t\tlet found = rows.includes(i); //Will return true if the index was found\n\t\t\tif(found) { //apply the onDelete function on the element\n\t\t\t\tif(this.onDelete) {this.onDelete(a)}\n\t\t\t}\n\t\t\treturn !found; //Return false to filter out the element\n\t\t}, this);\n\t\tthis.Array = newArray; //Update internal array\n\t\tthis.update({Action: \"Remove Row\"}); //Update the table\n\t\treturn this;\n\t}\n\tup() { //Move selected row up. Will do nothing if multiple rows are selected\n\t\tlet l = this.SelectedIndices.length;\n\t\tif(l == 0 || l > 1) {return this}\n\t\tlet s = this.SelectedIndices[0]; //Index of the row to move up\n\t\tif(s == 0) {return this} //There is nothing to do if this row is already at the top\n\t\tlet temp = this.Array[s-1]; //Keep a copy of the element above\n\t\tthis.Array[s-1] = this.Array[s]; //Replace the element above by new row\n\t\tthis.Array[s] = temp; //Replace the element by row above\n\t\tthis.update({Action: \"Up\"});\n\t\treturn this;\n\t}\n\tdown() { //Move selected row down. Will do nothing if multiple rows are selected\n\t\tlet l = this.SelectedIndices.length;\n\t\tif(l == 0 || l > 1) {return this}\n\t\tlet s = this.SelectedIndices[0]; //Index of the row to move down);\n\t\tif(s == (this.Length - 1)) {return this} //There is nothing to do if this row is already at the bottom\n\t\tlet temp = this.Array[s+1]; //Keep a copy of the element above\n\t\tthis.Array[s+1] = this.Array[s]; //Replace the element above by new row\n\t\tthis.Array[s] = temp; //Replace the element by row above\n\t\tthis.update({Action: \"Down\"});\n\t\treturn this;\n\t}\n\ttop() { //Move selected row to the top\n\t\tlet l = this.SelectedIndices.length;\n\t\tif(l == 0 || l > 1) {return this}\n\t\tlet s = this.SelectedIndices[0]; //Index of the row to move\n\t\tif(s == 0) {return this} //There is nothing to do if this row is already at the top\n\t\tlet temp = this.Array.splice(s, 1);\n\t\tthis.Array.unshift(temp[0]);\n\t\tthis.update({Action: \"Top\"});\n\t}\n\tbottom() { //Move selected row to the bottom\n\t\tlet l = this.SelectedIndices.length;\n\t\tif(l == 0 || l > 1) {return this}\n\t\tlet s = this.SelectedIndices[0]; //Index of the row to move\n\t\tif(s == (this.Length - 1)) {return this} //There is nothing to do if this row is already at the bottom\n\t\tlet temp = this.Array.splice(s, 1);\n\t\tthis.Array.push(temp[0]);\n\t\tthis.update({Action: \"Bottom\"});\n\t}\n\tempty() { //Empty the table\n\t\tif(this.onDelete) {\n\t\t\tthis.Array.forEach(function(a) {this.onDelete(a)}, this);\n\t\t}\n\t\tthis.Array = [];\n\t\tthis.update({Action: \"Empty\"});\n\t\treturn this;\n\t}\n\tsetValue(v) { //Set the selection of the table to the given array of index\n\t\tthis.Array.forEach(function(a, i) {\n\t\t\tlet found = v.includes(i); //Will return true if the index was found\n\t\t\tif(found) {a.Selected = true}\n\t\t\telse {a.Selected = false}\n\t\t});\n\t\tthis.update({Action: \"Set Value\"});\n\t\treturn this;\n\t}\n\tselectAll() { //Select all the rows\n\t\tthis.Array.forEach(function(a) {a.Selected = true});\n\t\tthis.update({Action: \"Set Value\"}); //Note that the action is considered a set Value here\n\t}\n\thideControls() { //Hide the control bar\n\t\tGetId(this.ID).firstChild.style.display = \"none\";\n\t\treturn this;\n\t}\n\tshowControls() { //Show the control bar\n\t\tGetId(this.ID).firstChild.style.display = \"block\";\n\t\treturn this;\n\t}\n\thasElement(field, value) { //Check if an element with its field matching value is present in the table\n\t\tvar found = false;\n\t\tvar a = this.Array;\n\t\tvar l = a.length;\n\t\tvar i = 0;\n\t\twhile(!found && i < l) {\n\t\t\tvar index = Object.keys(a[i]).findIndex(function(k) {return k == field});\n\t\t\tif(index > -1) {found = (Object.values(a[i])[index] == value)}\n\t\t\ti++;\n\t\t}\n\t\treturn found;\n\t}\n\tconfirmForm(action, next, arg) { //Open a form for confirmation of deletion action (RESET or DELETE). If approved, the function next will be called with arg as argument\n\t\tif (this.Length == 0) {return this}\n\t\tlet id = this.ID + \"_Form\";\n\t\tlet txt = \"The selected row(s) will be deleted.\";\n\t\tif(action == \"RESET\") {txt = \"This will remove all rows from this table.\"}\n\t\tForm.open({\n\t\t\tID: id,\n\t\t\tHTML: \"<div style=\\\"text-align: center\\\"><p style=\\\"color: red;\\\">\" + txt + \"</p><p>Are you sure you want to continue?</p></div>\",\n\t\t\tTitle: \"Confirm deletion\",\n\t\t\tButtons: [\n\t\t\t\t{\n\t\t\t\t\tLabel: \"Ok\",\n\t\t\t\t\tClick: function() {\n\t\t\t\t\t\tnext(arg);\n\t\t\t\t\t\tForm.close(id);\n\t\t\t\t\t}.bind(this),\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tLabel: \"Cancel\",\n\t\t\t\t\tClick: function() {Form.close(id)}\n\t\t\t\t}\n\t\t\t],\n\t\t});\n\t\treturn this;\n\t}\n\tlock() { //Prevent further interactions for this table\n\t\tthis.Locked = true;\n\t}\n\tunlock() { //Restore interactions for this table\n\t\tthis.Locked = false;\n\t}\n}","//***************************************************************\n// TABCONTROL object - One or multiple tabs, with control options\n//***************************************************************\nclass TabControl { \n\tconstructor(I) { //ID and array of Tabs objects to be passed to the constructor in input\n\t\tthis.ID = I.ID; //Container for the tabs\n\t\tthis.Tabs = []; //An array of TabPanel objects\n\t\tthis.LastKey = 0; //Tracker to give a unique key to each TabPanel objects\n\t\tthis.Preserve = (I.Preserve || false); //Whether previous content in the ID container should be preserved or erased. Default is to erase previous content\n\t\tthis.AutoInit = (I.AutoInit || false); //Will fall as false unless explicitely defined as true\n\t\tthis.Multiple = (I.Multiple || false); //This allows opening of multiple panels. Only available for Menu Layout. Default is only one panel open at a time\n\t\tthis.Disabled = (I.Disabled || false); //Whether the navigation should be disabled for this tab\n\t\tthis.AnimDuration = (I.AnimDuration || 300);\n\t\tthis.AutoScroll = true; //Whether the browser should scroll to display the content of the tab after opening animation\n\t\tif(I.AutoScroll === false) {this.AutoScroll = false}\n\t\tthis.Stack = I.Stack; //Whether tab contents should stack on top of each other, instead of being left-floating\n\t\tthis.Layout = (I.Layout || \"Horizontal\"); //Layout of the tab. Horizontal is the default, were headers and contents are stacked horizontally one after another. Menu allows an 'accordion menu'-like layout, whith a header and the content directly following, altogether stacked vertically. Vertical allows the headers to be stacked in a column, followed by the contents\n\t\tthis.AfterDelete = (I.AfterDelete || function(i) {}); //Additional actions to be taken after deletion of a tab. The function receives the index of the deleted tab as argument\n\t\tif(I.Tabs) {\n\t\t\tI.Tabs.forEach(function(t, i) { //Create the TabPanel Object using user input\n\t\t\t\tt.Key = i;\n\t\t\t\tt.Parent = this;\n\t\t\t\tif(this.Disabled) {t.Disabled = true}\n\t\t\t\tthis.Tabs.push(new TabPanel(t));\n\t\t\t\tthis.LastKey++;\n\t\t\t}, this);\n\t\t}\n\t\tif(this.AutoInit) {this.init()} //Append the buttons on the page directly on construction\n\t\treturn this; //For chaining\n\t}\n\t//Methods\n\tgetTabIndex(key) { //Returns the index of the TabPanel object having its property Key equal to the argument provided\n\t\tvar l = this.Tabs.length;\n\t\tfor(let i=0;i<l;i++) { //Loop the tabs\n\t\t\tif(this.Tabs[i].Key == key) {return i}\n\t\t}\n\t\treturn -1; //Fallback if nothing is found\n\t}\n\tindexForLabel(label) { //Returns the index of the TabPanel object having its property Label equal to the argument provided\n\t\tvar l = this.Tabs.length;\n\t\tfor(let i=0;i<l;i++) { //Loop the tabs\n\t\t\tif(this.Tabs[i].Label == label) {return i}\n\t\t}\n\t\treturn -1; //Fallback if nothing is found\n\t}\n\tdisable() { //Set the TabControl in disabled state and update the TabPanels accordingly\n\t\tthis.Disabled = true;\n\t\tthis.Tabs.forEach(function(t) {t.set(\"Disabled\")});\n\t\treturn this;\n\t}\n\tenable() { //Set the TabControl in enabled state and update the TabPanels accordingly\n\t\tthis.Disabled = false;\n\t\tthis.Tabs.forEach(function(t) {t.set(\"Enabled\")});\n\t\treturn this;\n\t}\n\tactive() { //Returns the index of the active tab\n\t\tif(this.Multiple) { //In this case, returns an array of active elements\n\t\t\tlet array = [];\n\t\t\tthis.Tabs.forEach(function(t, i) {\n\t\t\t\tif(t.Active) {array.push(i)}\n\t\t\t});\n\t\t\treturn array;\n\t\t}\n\t\telse { //Only one active tab at a time, returns the index of the winner\n\t\t\tlet l = this.Tabs.length;\n\t\t\tfor(let i=0;i<l;i++) { //Loop the tabs\n\t\t\t\tif(this.Tabs[i].Active) {return i}\n\t\t\t}\n\t\t}\n\t}\n\tinit() { //Initialize the html for the tabs in the ID container\n\t\tif(this.Tabs.length == 0) {return this} //Nothing there, end of the story...\n\t\tlet container = GetId(this.ID);\n\t\tif(container === null || container === undefined) {return this} //Do nothing if the container does not exist\n\t\tif(!container.classList.contains(\"LinkCtrl_Tab\")) {container.classList.add(\"LinkCtrl_Tab\")}; //Add classes for the tab\n\t\tif(!container.classList.contains(\"LinkCtrl_Round\")) {container.classList.add(\"LinkCtrl_Round\")};\n\t\tlet html = \"\";\n\t\tswitch(this.Layout) {\n\t\t\tcase \"Horizontal\": //In this case, the headers are prepared first horizontally, followed by the contents\n\t\t\t\thtml += \"<div class=\\\"LinkCtrl_TabHeaders\\\">\"; //Wrapper div for the headers\n\t\t\t\tthis.Tabs.forEach(function(t, i) {\n\t\t\t\t\thtml += t.initHeader();\n\t\t\t\t});\n\t\t\t\thtml += \"</div>\"; //End of Header wrapper\n\t\t\t\thtml += \"<div class=\\\"LinkCtrl_TabContents\\\">\"; //Wrapper div for the contents\n\t\t\t\tthis.Tabs.forEach(function(t) { //Add the contents\n\t\t\t\t\thtml += t.initContent();\n\t\t\t\t}); \n\t\t\t\thtml += \"</div>\"; //End of Content wrapper\n\t\t\t\tbreak;\n\t\t\tcase \"Menu\": //In this case, contents are displayed directly below the active headers, on top of each others\n\t\t\t\tthis.Tabs.forEach(function(t) {\n\t\t\t\t\thtml += \"<div class=\\\"LinkCtrl_TabHeaders\\\">\" + t.initHeader() + \"</div>\";\n\t\t\t\t\thtml += \"<div class=\\\"LinkCtrl_TabContents\\\">\" + t.initContent() + \"</div>\";\n\t\t\t\t});\n\t\t\t\tbreak;\n\t\t\tcase \"Vertical\": //In this case, headers are displayed in a column, then contents are adjacent and also in a column\n\t\t\t\thtml += \"<div class=\\\"LinkCtrl_TabHeaders\\\" style=\\\"float: left;\\\">\"; //Wrapper div for the headers\n\t\t\t\tthis.Tabs.forEach(function(t, i) {\n\t\t\t\t\thtml += t.initHeader() + \"<br>\";\n\t\t\t\t});\n\t\t\t\thtml += \"</div>\"; //End of Header wrapper\n\t\t\t\thtml += \"<div class=\\\"LinkCtrl_TabContents\\\">\"; //Wrapper div for the contents\n\t\t\t\tthis.Tabs.forEach(function(t) { //Add the contents\n\t\t\t\t\thtml += t.initContent();\n\t\t\t\t}); \n\t\t\t\thtml += \"</div>\"; //End of Content wrapper\n\t\t\t\tbreak;\n\t\t\tdefault: return this; //Exit here if an unknown layout is requested\n\t\t}\n\t\tif(this.Preserve) {container.insertAdjacentHTML(\"beforeend\", html)} //Preserve previous content\n\t\telse {container.innerHTML = html} //Erase previous content\n\t\tthis.bindEvents(); //Attach the events to the tab headers\n\t\treturn this;\n\t}\n\tbindEvents(index) { //Bind the events to the Tabs, or only the tab with the index provided\n\t\tlet me = GetId(this.ID);\n\t\tif(me === null || me === undefined) {return} //Do nothing if the container does not exist\n\t\tlet source = this.Tabs;\n\t\tif(index) {source = [this.Tabs[index]]} //If the index is provided\n\t\tsource.forEach(function(t, i) { //For each tab, bind the events\n\t\t\tlet header = GetId(t.Anchors.Header);\n\t\t\theader.addEventListener(\"click\", this.click.bind(this)); //Need to bind the object otherwise this refers to the header in the callback\n\t\t\tlet content = GetId(t.Anchors.Content);\n\t\t\tt.Height = content.clientHeight + \"px\"; //Log the height of this content\n\t\t\tt.Width = content.clientWidth + \"px\"; //Log also the width of this content\n\t\t\tif(!(t.Active)) { //hide it if necessary\n\t\t\t\tcontent.style.display = \"none\";\n\t\t\t} \n\t\t}, this);\n\t\treturn this;\n\t}\n\tclick(e) { //Action to be taken when click event occurs in a tab header section\n\t\tlet t = e.target;\n\t\tlet key = Number(t.getAttribute(\"tabKey\")); //The unique Key of the TabPanel\n\t\tlet index = this.getTabIndex(key);\n\t\tlet tab = this.Tabs[index];\n\t\tif(tab.Animate) {return this} //No spam allowed!\n\t\tif(tab.Disabled) {return this} //Disabled tab is not interactable\n\t\tif(t.hasAttribute(\"tabaction\")) { //Click was on a control\n\t\t\tswitch(t.getAttribute(\"tabAction\")) {\n\t\t\t\tcase \"Setting\": break;\n\t\t\t\tcase \"Edit\": break;\n\t\t\t\tcase \"Move\": break;\n\t\t\t\tcase \"Delete\": this.deleteConfirm(index); break;\n\t\t\t\tdefault: break;\n\t\t\t}\n\t\t}\n\t\telse { //Click was on the tab\n\t\t\tif(this.Multiple) {tab.fold()} //No need to worry in this case\n\t\t\telse {this.jumpTo(index)}\n\t\t}\n\t\treturn this;\n\t}\n\tjumpTo(index) { //Jump to the tab with the provided index\n\t\tif(this.Tabs[index].Active) {return this} //Already open, nothing else to do\n\t\tif(!this.Multiple) { //Only one tab active, need to deactivate previously activated tab\n\t\t\tlet a = this.active();\n\t\t\tif (a !== undefined) {this.Tabs[this.active()].set(\"Resting\", {NoAnimation: true})}\n\t\t}\n\t\tthis.Tabs[index].set(\"Active\");\n\t\treturn this;\n\t}\n\tsetOpen(array) { //Set open the tabs with their index in the array provided, close the others. Only for tabs with Multiple enabled!\n\t\tif(this.Multiple) {\n\t\t\tthis.Tabs.forEach(function(t, i) {\n\t\t\t\tif(array.includes(i)) {t.set(\"Active\")}\n\t\t\t\telse {t.set(\"Resting\")}\n\t\t\t});\n\t\t}\n\t\treturn this;\n\t}\n\tcloseAll() { //Close all the tabs\n\t\tthis.Tabs.forEach(function(t) {\n\t\t\tt.Active = false;\n\t\t\tt.updateState();\n\t\t});\n\t\treturn this;\n\t}\n\topenAll() { //Open all the tabs\n\t\tthis.Tabs.forEach(function(t) {\n\t\t\tt.Active = true;\n\t\t\tt.updateState();\n\t\t});\n\t\treturn this;\n\t}\n\taddTabs(array) { //Append new tabs provided as an array\n\t\tarray.forEach(function(a) {this.addTab(a)}, this);\n\t\treturn this;\n\t}\n\taddTab(I) { //Create a new tab using the properties passed as an object in input\n\t\tif(I === undefined) {return this} //Nothing provided\n\t\tI.Key = this.LastKey; //\n\t\tI.Parent = this; \t  //Add or rewrite essential properties for the new tab\n\t\tI.Active = false;\t  //\n\t\tif(this.Disabled) {I.Disabled = true}\n\t\tthis.Tabs.push(new TabPanel(I)); //Create the new tab\n\t\tlet l = this.Tabs.length - 1; //Last element added is sure to be at this location in the Tabs array\n\t\tif(this.LastKey == 0) {this.init()} //If this is the first tab, initialize the tab\n\t\telse {this.addTabHTML(l)} //Add the html for the new tab. This will succeed only if the containers are available\n\t\tif(I.SetActive) {this.jumpTo(l)}\n\t\tthis.LastKey++; //Neutralize previous key to guarantee unicity\n\t\treturn this.Tabs[l+1]; //Return the newly created tab\n\t}\n\taddTabHTML(index) { //Internal use. Create the HTML for the tab of the desired index, if the containers exist. The html is simply appended at the end\n\t\tvar me = GetId(this.ID);\n\t\tif(me === null || me === undefined) {return} //Do nothing if the container does not exist\n\t\tif(!me.classList.contains(\"LinkCtrl_Tab\")) {return} //The container exist but has not yet been initialized as a tab\n\t\tvar tab = this.Tabs[index];\n\t\tswitch(this.Layout) {\n\t\t\tcase \"Menu\":\n\t\t\t\tme.insertAdjacentHTML(\"beforeend\", \n\t\t\t\t\t\"<div class=\\\"LinkCtrl_TabHeaders\\\">\" + tab.initHeader() + \"</div>\" +\n\t\t\t\t\t\"<div class=\\\"LinkCtrl_TabContents\\\">\" + tab.initContent() + \"</div>\"\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase \"Horizontal\": //Append the html at the end of each container\n\t\t\t\tme.children[0].insertAdjacentHTML(\"beforeend\", tab.initHeader());\n\t\t\t\tme.children[1].insertAdjacentHTML(\"beforeend\", tab.initContent());\n\t\t\t\tbreak;\n\t\t\tcase \"Vertical\": //Append the html at the end of each container, with a new line on the headers to get vertical piling\n\t\t\t\tme.children[0].insertAdjacentHTML(\"beforeend\", tab.initHeader() + \"<br>\");\n\t\t\t\tme.children[1].insertAdjacentHTML(\"beforeend\", tab.initContent());\n\t\t\t\tbreak;\n\t\t\tdefault: return;\n\t\t}\n\t\tme.style.display = \"block\"; //Make the tab visible again (in case it was hidden following deletion of the only tab left)\n\t\tthis.bindEvents(index); //Don't bind the events multiple times! Only the new tab should have events binded\n\t\treturn this;\n\t}\n\tdeleteConfirm(index) { //Confirmation of tab deletion\n\t\tvar ui = this; //Shortcut inside the function\n\t\tvar id = \"Form_DeleteTab\";\n\t\tForm.open({\n\t\t\tID: id,\n\t\t\tHTML: \"<div style=\\\"text-align: center\\\"><p style=\\\"color: red;\\\">This will delete the tab and all its contents.</p><p>Are you sure you want to continue?</p></div>\",\n\t\t\tTitle: \"Confirm deletion\",\n\t\t\tButtons: [\n\t\t\t\t{Label: \"Ok\", Click: function() {\n\t\t\t\t\tui.deleteTab(index);\n\t\t\t\t\tui.AfterDelete(index);\n\t\t\t\t\tForm.close(id);\n\t\t\t\t}},\n\t\t\t\t{Label: \"Cancel\", Click: function() {Form.close(id)} }\n\t\t\t],\n\t\t\tSize: 500,\n\t\t});\n\t\treturn this;\n\t}\n\tdeleteTab(index) { //Tab deletion\n\t\tvar tabs = this.Tabs;\n\t\tvar l = tabs.length;\n\t\tif(tabs[index] === undefined) {return this} //Stop there if the tab at this index does not exist\n\t\tif(!this.Multiple && tabs[index].Active) { //In case this was the active tabs and the tabControl is not set on multiple\n\t\t\tif(index == 0 && l > 1) {this.jumpTo(1)} //Go to the next one if this was the first and something follows\n\t\t\tif(index > 0) {this.jumpTo(index - 1)} //Otherwise, go to the previous one if possible\n\t\t}\n\t\ttabs[index].delete(); //Delete the HTML\n\t\ttabs.splice(index, 1); //Delete the object\n\t\tif(tabs.length == 0) { //If no tabs are left\n\t\t\tvar me = GetId(this.ID);\n\t\t\tif(me !== null || me !== undefined) {me.style.display = \"none\"} //Hide the remaining HTML for the ControlTab, if it exists\n\t\t}\n\t\treturn this;\n\t}\n\trename(index, name) { //Rename tab index with new name\n\t\tthis.Tabs[index].rename(name);\n\t\treturn this;\n\t}\n}","//**************************************************************************\n// TABPANEL object - A tab object used and controlled by a TabControl object\n//**************************************************************************\nclass TabPanel {\n\tconstructor(I) {\n\t\tthis.Key = I.Key; //Unique index for the. Note that this is NOT the index in the parent array\n\t\tthis.Parent = I.Parent; //The parent TabControl object\n\t\tthis.Label = (I.Label || \"\"); //Label displayed by the header\n\t\tthis.Active = (I.Active || false); //Whether this panel is active\n\t\tthis.Disabled = (I.Disabled || false); //Whether this panel is disabled\n\t\tthis.Controls = (I.Controls || []); //Controls available for this panel. Possible values are [\"Form\", \"Edit\", \"Move\", \"Delete\"], in whatever order\n\t\tthis.Content = I.Content; //Content to be displayed inside the tab while active. It should be provided as an object with Type and Value properties\n\t\tlet root = this.Parent.ID;\n\t\tthis.Anchors = {\n\t\t\tHeader: root + \"_TabHeader_\" + this.Key,\n\t\t\tContent: root + \"_TabContent_\" + this.Key,\n\t\t}\n\t\tthis.initContentInternal(); //Initialize the contents. This is in case DOM needs to be copied before being destroyed by autoInit of the parent\n\t\treturn this;\n\t}\n\t//Methods\n\tclassHeader() { //Return a string for the classes that should be applied to the header, given current panel properties\n\t\tlet classes = \"LinkCtrl LinkCtrl_RoundT\";\n\t\tif(this.Active) {classes += \" LinkCtrl_Active\"} //Active class has priority over the rest\n\t\telse {\n\t\t\tif(this.Disabled) {classes += \" LinkCtrl_Disabled\"}\n\t\t\telse {classes += \" LinkCtrl_Resting\"}\n\t\t}\n\t\treturn classes;\n\t}\n\t/*classControl() { //Return a string for the classes that should be applied to the control of this header, given current panel properties\n\t\tvar classes = \"LinkCtrl_Icon\";\n\t\tif(this.Active) {classes += \" LinkCtrl_IconActive\"} //Active class has priority over the rest\n\t\telse {\n\t\t\tif(this.Disabled) {classes += \" LinkCtrl_IconDisabled\"}\n\t\t\telse {classes += \" LinkCtrl_IconResting\"}\n\t\t}\n\t\treturn classes;\n\t}*/\n\tinitHeader() { //Returns the html for this tab header\n\t\tlet html = \"<span \";\n\t\thtml += \"id=\\\"\" + this.Anchors.Header + \"\\\" \";\n\t\thtml += \"class=\\\"\" + this.classHeader() + \"\\\" \";\n\t\thtml += \"tabKey=\\\"\" + this.Key + \"\\\" style=\\\"font-size: 1em; white-space: pre\\\">\" + this.Label;\n\t\tif(this.Controls.length > 0) {html += this.appendControls()} //Add the controls if they are desired\n\t\thtml += \"</span> \"; //Single whitespace between each header (in case another one follows)\n\t\treturn html;\n\t}\n\tappendControls() { //Prepare the html of the controls usable to edit this tab\n\t\tlet html = \"\";\n\t\tthis.Controls.forEach(function(c) {\n\t\t\tlet o = {Type: c, Active: this.Active, Space: true, Attributes:[{Name: \"tabKey\", Value: this.Key}, {Name: \"tabAction\", Value: c}]};\n\t\t\tif(!this.Disabled) {\n\t\t\t\tswitch(c) {\n\t\t\t\t\tcase \"Setting\": o.Title = \"Click here to see the settings for this tab\"; break;\n\t\t\t\t\tcase \"Edit\": o.Title = \"Click here to edit the tab\"; break;\n\t\t\t\t\tcase \"Move\": o.Title = \"Click here to move this tab at the desired position\"; break;\n\t\t\t\t\tcase \"Delete\": o.Title = \"Click here to delete this tab\"; break;\n\t\t\t\t}\n\t\t\t}\n\t\t\thtml += LinkCtrl.icon(o);\n\t\t}, this);\n\t\treturn html;\n\t}\n\tinitContent() { //Return the html for the contents of this tab\n\t\tlet html = \"\";\n\t\tlet style = \"\"; //Hide content of inactive tabs\n\t\tif(!this.Parent.Stack) {style += \"; float: left\"}\n\t\thtml += \"<div id=\\\"\" + this.Anchors.Content + \"\\\" class=\\\"LinkCtrl_TabPanel\\\" style=\\\"display: block\" + style + \"\\\">\";\n\t\thtml += this.initContentInternal();\n\t\thtml += \"</div>\";\n\t\treturn html;\n\t}\n\tinitContentInternal() {\n\t\tlet c = this.Content;\n\t\tif(c === undefined) {return \"\"}\n\t\tswitch(c.Type) {\n\t\t\tcase \"HTML\": return c.Value; //The content is plain HTML\n\t\t\tcase \"DOM\": //The content is written in the DOM, at the provided ID\n\t\t\t\tif(c.Value) { //If the ID exists\n\t\t\t\t\tlet dom = GetId(c.Value); //Get the DOM element\n\t\t\t\t\tif(dom !== null && dom !== undefined) { //If this indeed exists\n\t\t\t\t\t\tlet html = dom.innerHTML; //copy the content\n\t\t\t\t\t\tthis.Content = {Type: \"HTML\", Value: html} //Update the tab object with its new content\n\t\t\t\t\t\tdom.remove(); //Bye bye\n\t\t\t\t\t\treturn html; //Output the content\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn \"\"; //Nothing was found at the given location\n\t\t\tdefault: return \"\"; //Unknown Type requested\n\t\t}\n\t}\n\tupdateState(I) { //Update the state of this tab, based on current properties. This fully updates the header, and the content will be made visible or hidden\n\t\tlet header = GetId(this.Anchors.Header); //Update the state of the header\n\t\tif(!(header === null || header === undefined)) { //If the html exists\n\t\t\theader.className = this.classHeader(); //Update the class of the header\n\t\t\tif(this.Controls.length > 0) { //If some control exists, they also need to have their state updated. This includes inactivating the title for disabled panels, so the easiest is to prepare the html anew\n\t\t\t\theader.innerHTML = this.Label + \"&nbsp;\" + this.appendControls();\n\t\t\t}\n\t\t\telse {\n\t\t\t\theader.innerHTML = this.Label; //If the panel has changed name, this should also be reflected here\n\t\t\t}\n\t\t}\n\t\tif(I && I.HeaderOnly) {return}\n\t\tthis.animate(I);\n\t}\n\tupdateContent(C) { //Update the content of the Tab with the new one provided, both at the object and html level. This will remove any previous content!\n\t\tthis.Content = C;\n\t\tlet content = GetId(this.Anchors.Content);\n\t\tif(!(content === null || content === undefined)) { //If the html exists\n\t\t\tcontent.innerHTML = this.initContentInternal();\n\t\t}\n\t}\n\tset(as, I) { //Set the tab at the desired state(s). Multiple Keywords, space delimited, can be provided\n\t\tlet keywords = as.split(\" \"); //Array of keywords\n\t\tkeywords.forEach(function(k) { //Loop the keywords\n\t\t\tswitch(k) {\n\t\t\t\tcase \"Active\":\n\t\t\t\t\tthis.Active = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"Resting\":\n\t\t\t\t\tthis.Active = false;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"Disabled\":\n\t\t\t\t\tthis.Disabled = true;\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"Enabled\":\n\t\t\t\t\tthis.Disabled = false;\n\t\t\t\t\tbreak;\n\t\t\t\tdefault: break;\n\t\t\t}\n\t\t}, this);\n\t\tthis.updateState(I);\n\t\treturn this;\n\t}\n\tfold() { //Hide or reveal the content for this panel, updating the state of the header\n\t\tthis.Active = !this.Active; //Reverse the state, then animate the change\n\t\tthis.updateState();\n\t}\n\tdelete() {\n\t\tlet header = GetId(this.Anchors.Header);\n\t\tif(!(header === null || header === undefined)) {//Remove the html if it exists\n\t\t\tif(this.Parent.Layout == \"Vertical\") {header.nextElementSibling.remove()}\n\t\t\theader.remove()\n\t\t} \n\t\tlet content = GetId(this.Anchors.Content); \n\t\tif(!(content === null || content === undefined)) {content.remove()} //Remove the html if it exists\n\t}\n\trename(name) { //Update the name of the tab using the new text provided\n\t\tthis.Label = name; //Update property\n\t\tthis.updateState({HeaderOnly: true}); //Update display of the text only\n\t}\n\tanimate(I) {\n\t\tlet time = this.Parent.AnimDuration;\n\t\tif(I && I.NoAnimation) {time = 1} //Minimum duration to make it (almost) instant\n\t\tlet content = GetId(this.Anchors.Content); //Animate the content based on its Active property\n\t\tif(!(content === null || content === undefined)) { //If the html exists\n\t\t\tthis.Animate = true; //Prevent further interactions for this panel during the animation\n\t\t\tif(this.Active) { //Make the content visible\n\t\t\t\tcontent.style.display = \"block\";\n\t\t\t\tlet anim = content.animate(this.getAnimTransform(\"open\"), {duration: time, iterations: 1, fill: \"forwards\"});\n\t\t\t\tanim.onfinish = function() { //If the content of the tab has been changed programmatically, the height/width must be updated to accomodate the new contents\n\t\t\t\t\tlet ResizeAnim = content.animate(this.getAnimTransform(\"resize\"), {duration: 1, iterations: 1, fill: \"forwards\"});\n\t\t\t\t\tResizeAnim.onfinish = function() { //Update properties for smooth opening next time\n\t\t\t\t\t\tthis.Height = content.clientHeight + \"px\"; //log the current height and width\n\t\t\t\t\t\tthis.Width = content.clientWidth + \"px\";\n\t\t\t\t\t\tif(this.Parent.AutoScroll) {\n\t\t\t\t\t\t\tcontent.scrollIntoView({behavior: \"smooth\", block: \"center\", inline: \"nearest\"});\n\t\t\t\t\t\t}\n\t\t\t\t\t\tthis.Animate = false;\n\t\t\t\t\t}.bind(this);\n\t\t\t\t}.bind(this);\n\t\t\t}\n\t\t\telse { ////Make the content hidden\n\t\t\t\tthis.Height = content.clientHeight + \"px\"; //log the current height and width\n\t\t\t\tthis.Width = content.clientWidth + \"px\";\n\t\t\t\tlet anim = content.animate(this.getAnimTransform(\"close\"), {duration: time, iterations: 1, fill: \"forwards\"});\n\t\t\t\tanim.onfinish = function() {\n\t\t\t\t\tcontent.style.display = \"none\";\n\t\t\t\t\tthis.Animate = false;\n\t\t\t\t}.bind(this);\n\t\t\t}\n\t\t}\n\t}\n\tgetAnimTransform(state) { //Return the animation transform to use while animating this panel\n\t\tswitch(state) {\n\t\t\tcase \"open\":\n\t\t\t\tlet from = {transform: \"translateY(-\" + this.Height + \")\", height: 0, opacity: 0};\n\t\t\t\tlet to = {transform: \"translateY(0)\", height: this.Height, opacity: 1};\n\t\t\t\tif(this.Parent.Layout == \"Horizontal\" && this.Parent.Multiple == true) { //Specific case\n\t\t\t\t\tfrom = {transform: \"translateY(-\" + this.Height + \")\", transform: \"translateX(-\" + this.Width + \")\", height: 0, width: 0, opacity: 0};\n\t\t\t\t\tto = {transform: \"translateY(0)\", transform: \"translateX(0)\", height: this.Height, width: this.Width, opacity: 1};\n\t\t\t\t}\n\t\t\t\treturn [from, to];\n\t\t\tcase \"close\": \n\t\t\t\tif(this.Parent.Layout == \"Horizontal\" && this.Parent.Multiple == true) { //Specific case\n\t\t\t\t\treturn [\n\t\t\t\t\t\t{transform: \"translateY(0)\", transform: \"translateX(0)\", height: this.Height, width: this.Width, opacity: 1},\n\t\t\t\t\t\t{transform: \"translateY(-\" + this.Height + \")\", transform: \"translateX(-\" + this.Width + \")\", height: 0, width: 0, opacity: 0}\n\t\t\t\t\t];\n\t\t\t\t}\n\t\t\t\treturn [\n\t\t\t\t\t{transform: \"translateY(0)\", height: this.Height, opacity: 1},\n\t\t\t\t\t{transform: \"translateY(-\" + this.Height + \")\", height: 0, opacity: 0}\n\t\t\t\t];\n\t\t\tcase \"resize\":\n\t\t\t\tif(this.Parent.Layout == \"Horizontal\" && this.Parent.Multiple == true) { //Specific case\n\t\t\t\t\treturn [{height: this.Height, width: this.Width}, {height: \"auto\", width: \"auto\"}];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\treturn [{height: this.Height}, {height: \"auto\"}];\n\t\t\t\t}\n\t\t\tdefault: return [];\n\t\t}\n\t}\n}","//***********************************************************************************\n// LINKCTRL_BUTTON object - Extension of the HTML button input for better interaction\n//***********************************************************************************\nclass LinkCtrl_Button extends LinkCtrl {\n\tconstructor(I) {\n\t\tsuper(I); //Call the super class constructor and pass in the input object\n\t\tthis.Type = \"Button\";\n\t\tthis.Icon = I.Icon; //Icon to use for the button. Should be a structured object {Type, Color, Space, Active, Size, Title, Attributes}\n\t\tthis.Click = I.Click; //Function to execute on click\n\t\treturn this;\n\t}\n\t//Methods\n\tnode() { //Return a new span node representing this button\n\t\tlet span = document.createElement(\"span\"); //Spawn the node for the button\n\t\tspan.style.whiteSpace = \"pre\";\n\t\tspan.className = \"LinkCtrl\" + this.Classes; //Add the class to the element\n\t\tspan.id = this.Me;\n\t\tif(this.Title) {span.title = this.Title}\n\t\tif(this.Label) {span.innerHTML = this.Label}\n\t\tif(this.Icon) {\n\t\t\tlet icon = LinkCtrl.icon(this.Icon); //Generate the icon html\n\t\t\tif(this.Icon.Left) {span.insertAdjacentHTML(\"afterbegin\", icon)} //Icon first\n\t\t\telse {span.insertAdjacentHTML(\"beforeend\", icon)} //Icon last\n\t\t}\n\t\tthis.Button = span; //Log the span html object as the new button control\n\t\treturn span;\n\t}\n\thtml() { //Initialize the html for the control\n\t\tlet html = this.node().outerHTML; //Html for the button\n\t\tif(this.NewLine) {html += \"<br>\"} //Newline after this control if needed\n\t\treturn html;\n\t}\n\tbindEvents() { //Bind the events to the control\n\t\tif(this.Click !== undefined) { //Attach the event if defined\n\t\t\tGetId(this.Me).addEventListener(\"click\", function(e) {\n\t\t\t\tif(!this.Disabled) {this.Click()} //Execute the action if not disabled\n\t\t\t}.bind(this));\n\t\t}\n\t\treturn this;\n\t}\n\tupdateValue(v, ui) { //Update the value of the html control. For button, no value is displayed or set by the user, but the function still works\n\t\tthis.Value = v; //Can be used to store and retrieve values programmatically, if needed\n\t\treturn this;\n\t}\n\tupdate() { //Update the html of the object\n\t\tlet me = GetId(this.Me);\n\t\tif(me !== null) {me.replaceWith(this.node())}\n\t\tthis.bindEvents();\n\t\treturn this;\n\t}\n\tdisable() { //Disable the button\n\t\tthis.Disabled = true;\n\t\tthis.update();\n\t\treturn this;\n\t}\n\tenable() {\n\t\tthis.Disabled = false;\n\t\tthis.update();\n\t\treturn this;\n\t}\n}","//**************************************************************************************\n// LINKCTRL_BUTTONBAR object - Extension of the HTML button input for better interaction\n//**************************************************************************************\nclass LinkCtrl_ButtonBar extends LinkCtrl {\n\tconstructor(I) {\n\t\tsuper(I); //Call the super class constructor and pass in the input object\n\t\tthis.Type = \"ButtonBar\";\n\t\tthis.Spacing = I.Spacing; //Whether the buttons are compacted or spaced\n\t\tthis.Buttons = []; //Buttons implemented in this bar\n\t\tthis.Title = (I.Title || \"\");\n\t\tlet n = I.Buttons.length - 1; //Last index\n\t\tif(n < 0) {return this} //No buttons defined, exit before crashing in the loop\n\t\tI.Buttons.forEach(function(b, i) {\n\t\t\tb.ID = I.ID + \"_button\";\n\t\t\tif(this.Spacing !== true) { //Append the buttons in a compact styling, without spacing\n\t\t\t\tb.Chain = {Index: i}; //The chain property will take care of the index for each button\n\t\t\t\tif(i == n) {b.Chain.Last = true} //Flag the last index\n\t\t\t}\n\t\t\telse {b.ID += \"_\" + i} //Manually implement the indices\n\t\t\tthis.Buttons.push(LinkCtrl.new(\"Button\", b)); //Implement each button as a LinkCtrl_Button object\n\t\t}, this);\n\t\tthis.Inline = I.Inline; //Whether buttons should be forced in a single line\n\t\tthis.Me = this.ID + \"_ButtonBar\";\n\t\treturn this;\n\t}\n\t//Methods\n\tnode() { //Return a new span node representing this button\n\t\tif(LinkCtrl_ButtonBar.Index === undefined) {LinkCtrl_ButtonBar.Index = 0} //Index to guarantee ID unicity\n\t\tlet div = document.createElement(\"div\"); //Spawn the container node\n\t\tif(this.Inline) {div.className = \"LinkCtrl_Inline\"}\n\t\tdiv.id = this.Me + \"_\" + LinkCtrl_ButtonBar.Index;\n\t\tdiv.title = this.Title;\n\t\tLinkCtrl_ButtonBar.Index++; //Guarantee unicity for the next button_bar ID\n\t\tthis.Buttons.forEach(function(b, i) {\n\t\t\tdiv.append(b.node()); //Append the node for each button\n\t\t\tif(this.Spacing === true) {div.insertAdjacentHTML(\"beforeend\", \" \")} //To space the buttons evenly\n\t\t}, this);\n\t\treturn div;\n\t}\n\thtml() { //Initialize the html for the control\n\t\tlet html = this.node().outerHTML; //Html for the button\n\t\tif(this.NewLine) {html += \"<br>\"} //Newline after this control if needed\n\t\treturn html;\n\t}\n\tbindEvents() { //Bind the events to the control\n\t\tthis.Buttons.forEach(function(b) {b.bindEvents()});\n\t\treturn this;\n\t}\n\tupdateValue(v, ui) { //Update the value of the html control. For button, no value is displayed or set by the user, but the function still works\n\t\tthis.Value = v; //Can be used to store and retrieve values programmatically, if needed\n\t\treturn this;\n\t}\n\tupdate() { //Update the html of the object\n\t\tthis.Buttons.forEach(function(b) {b.update()});\n\t\treturn this;\n\t}\n\tdisable() { //Disable the button\n\t\tthis.Buttons.forEach(function(b) {b.disable()});\n\t\treturn this;\n\t}\n\tenable() {\n\t\tthis.Buttons.forEach(function(b) {b.enable()});\n\t\treturn this;\n\t}\n}","//////////////////////////////////////////////////////////////////////////////////////////////\n// LINKCTRL_CHECKBOX object - Extension of the HTML checkbox for better interaction //////////\n//////////////////////////////////////////////////////////////////////////////////////////////\nclass LinkCtrl_Checkbox extends LinkCtrl {\n\tconstructor(I) {\n\t\tsuper(I); //Call the super class constructor and pass in the input object\n\t\tthis.Type = \"Checkbox\";\n\t\treturn this;\n\t}\n\t//Methods\n\thtml() { //Initialize the html for the control\n\t\tvar val = \"\";\n\t\tif(this.Value) {val = \" checked\"}\n\t\tvar html = \"<label id=\\\"\" + this.Me + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl\" + this.Classes + \"\\\">\"; //Opening label for the control\n\t\tif(this.ControlLeft) { //The control is first, the label after\n\t\t\thtml += \"<input type=\\\"checkbox\\\" id=\\\"\" + this.Control + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl_ChkBox\\\"\" + val + \">\";\n\t\t\tif(this.HasLabel) {html += \"&nbsp;\" + this.Label} //Add the label\n\t\t}\n\t\telse { //The other way around\n\t\t\tif(this.HasLabel) {html += this.Label + \"&nbsp;\"} //Add the label\n\t\t\thtml += \"<input type=\\\"checkbox\\\" id=\\\"\" + this.Control + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl_ChkBox\\\"\" + val + \">\"; \n\t\t}\n\t\thtml += \"</label>\"; //Closure of the control\n\t\tif(this.NewLine) {html += \"<br>\"} //Newline after this control if needed\n\t\treturn html;\n\t}\n\tbindEvents() { //Bind the events to the control\n\t\tGetId(this.Me).children[0].addEventListener(\"click\", function(e) {\n\t\t\tvar newVal = e.target.checked;\n\t\t\tthis.Value = newVal;\n\t\t\tvar DOMlist = e.target.parentElement.classList; //This is not an array but a DOMTokenList, which has its own methods\n\t\t\tif(newVal) {DOMlist.replace(\"LinkCtrl_Resting\", \"LinkCtrl_Active\")}\n\t\t\telse {DOMlist.replace(\"LinkCtrl_Active\", \"LinkCtrl_Resting\")}\n\t\t\tthis.change(newVal);\n\t\t}.bind(this));\n\t}\n\tupdateValue(v, ui) { //Update the value of the html control, following value change. v is the new value, ui refers to the hosting element\n\t\tthis.Value = v;\n\t\tif(ui) {\n\t\t\tui.children[0].checked = v;\n\t\t\tvar DOMlist = ui.classList; //This is not an array but a DOMTokenList, which has its own methods\n\t\t\tif(v) {DOMlist.replace(\"LinkCtrl_Resting\", \"LinkCtrl_Active\")}\n\t\t\telse {DOMlist.replace(\"LinkCtrl_Active\", \"LinkCtrl_Resting\")}\n\t\t}\n\t}\n}","//////////////////////////////////////////////////////////////////////////////////////////////\n// LINKCTRL_COLOR object - a custom color input with sets of interaction /////////////////////\n//////////////////////////////////////////////////////////////////////////////////////////////\nclass LinkCtrl_Color extends LinkCtrl {\n\tconstructor(I) {\n\t\tsuper(I); //Call the super class constructor and pass in the input object\n\t\tthis.Type = \"Color\";\n\t\treturn this;\n\t}\n\t//Methods\n\thtml() { //Initialize the html for the control\n\t\tvar html = \"<label id=\\\"\" + this.Me + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl\" + this.Classes + \"\\\">\"; //Opening label for the control\n\t\tif(this.ControlLeft) { //The control is first, the label after\n\t\t\thtml += \"<span id=\\\"\" + this.Control + \"\\\" class=\\\"LinkCtrl_Color\\\" title=\\\"\" + this.Title + \"\\\" style=\\\"background-color: \" + this.Value + \"\\\">&nbsp;&nbsp;&nbsp;&nbsp;</span>\"; //4 spaces, to get the color box wide enough\n\t\t\tif(this.HasLabel) {html += \"&nbsp;\" + this.Label} //Add the label\n\t\t}\n\t\telse { //The other way around\n\t\t\tif(this.HasLabel) {html += this.Label + \"&nbsp;\"} //Add the label\n\t\t\thtml += \"<span id=\\\"\" + this.Control + \"\\\" class=\\\"LinkCtrl_Color\\\" title=\\\"\" + this.Title + \"\\\" style=\\\"background-color: \" + this.Value + \"\\\">&nbsp;&nbsp;&nbsp;&nbsp;</span>\"; //4 spaces, to get the color box wide enough\n\t\t}\n\t\thtml += \"</label>\"; //Closure of the control\n\t\tif(this.NewLine) {html += \"<br>\"} //Newline after this control if needed\n\t\treturn html;\n\t}\n\tbindEvents() { //Bind the events to the control\n\t\tGetId(this.Me).addEventListener(\"click\", function(e) {\n\t\t\tForm_Color({\n\t\t\t\tCaller: this,\n\t\t\t\tafter: this.change,\n\t\t\t});\n\t\t}.bind(this));\n\t}\n\tupdateValue(v, ui) { //Update the value of the html control, following value change. v is the new value, ui refers to the hosting element\n\t\tthis.Value = v;\n\t\tif(ui) {ui.children[0].style.backgroundColor = v}\n\t}\n}","//*******************************************************************************\n// LINKCTRL_FILE object - Extension of the HTML file input for better interaction\n//*******************************************************************************\nclass LinkCtrl_File extends LinkCtrl {\n\tconstructor(I) {\n\t\tsuper(I); //Call the super class constructor and pass in the input object\n\t\tthis.Type = \"File\";\n\t\tthis.Multiple = I.Multiple; //Whether multiple files are accepted\n\t\tthis.Accept = I.Accept; //What file type should be accepted. Provided as a string without space, as in the accept attribute of the html file input (.xxx,.xxx)\n\t\tthis.DragMsg = \"Drag and drop your files here\"; //Default message to display in the drop box\n\t\treturn this;\n\t}\n\t//Static Methods\n\tstatic dropMsg(msg) { //return the html for the msg to display as inner content of the drop box\n\t\treturn \"<div class=\\\"LinkCtrl_FileDropInner\\\" ondragenter=\\\"event.target.remove()\\\">\" + msg + \"</div>\";\n\t}\n\t//Methods\n\thtml() { //Initialize the html for the control\n\t\tlet html = \"\";\n\t\thtml += \"<span title=\\\"Reset the file selection\\\" class=\\\"LinkCtrl LinkCtrl_Round LinkCtrl_Resting\\\">Clear</span>&nbsp;\";\n\t\thtml += \"<span id=\\\"\" + this.Me + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl\" + this.Classes + \"\\\">\"; //Opening label for the control\n\t\thtml += \"Browse...\" //Add the label\n\t\tlet multiple = \"\";\n\t\tif(this.Multiple) {multiple = \"multiple\"}\n\t\tlet accept = \"\";\n\t\tif(this.Accept) {accept = \" accept=\" + this.Accept}\n\t\thtml += \"<input type=\\\"file\\\" id=\\\"\" + this.Control + \"\\\" style=\\\"display: none\\\" \" + multiple + accept + \">\"; //hidden input\n\t\thtml += \"</span>\"; //Closure of the control\n\t\thtml += this.fileInfo();\n\t\t\n\t\thtml += \"<div class=\\\"LinkCtrl_FileDrop\\\">\" + LinkCtrl_File.dropMsg(this.DragMsg) + \"</div>\";\n\t\t\n\t\tif(this.NewLine) {html += \"<br>\"} //Newline after this control if needed\n\t\treturn html;\n\t}\n\tbindEvents() { //Bind the events to the control\n\t\tlet root = GetId(this.Me); //The hosting span for the control\n\t\tlet input = root.children[0]; //The hidden input\n\t\tlet clear = root.previousElementSibling; //The clear button\n\t\tlet drop = root.nextElementSibling.nextElementSibling; //The drop box\n\t\troot.addEventListener(\"click\", function() {input.click()}); //Activate the file:input button to open the file selection browsing window)\n\t\tinput.addEventListener(\"change\", function() {\n\t\t\tthis.Value = input.files;\n\t\t\troot.nextElementSibling.remove(); //The following span is removed and replaced with an updated one\n\t\t\troot.insertAdjacentHTML(\"afterend\", this.fileInfo());\n\t\t\tthis.change(input.files);\n\t\t}.bind(this));\n\t\tclear.addEventListener(\"click\", function() {\n\t\t\tthis.Value = [];\n\t\t\troot.nextElementSibling.remove(); //The following span is removed and replaced with an updated one\n\t\t\troot.insertAdjacentHTML(\"afterend\", this.fileInfo());\n\t\t\tdrop.className = \"LinkCtrl_FileDrop\"; //Reset the style of the drop box\n\t\t\tdrop.innerHTML = LinkCtrl_File.dropMsg(this.DragMsg); //Also reset the drop msg\n\t\t\tthis.change();\n\t\t}.bind(this));\n\t\tdrop.addEventListener(\"dragenter\", function(e) {\n\t\t\te.target.className = \"LinkCtrl_FileDropHover LinkCtrl_FileDrop\";\n\t\t\te.target.innerHTML = \"\";\n\t\t\te.preventDefault();\n\t\t});\n\t\tdrop.addEventListener(\"dragleave\", function(e) {\n\t\t\te.target.className = \"LinkCtrl_FileDrop\";\n\t\t\te.target.innerHTML = LinkCtrl_File.dropMsg(this.DragMsg);\n\t\t\te.preventDefault();\n\t\t}.bind(this));\n\t\tdrop.addEventListener(\"dragover\", function(e) {\n\t\t\te.preventDefault();\n\t\t});\n\t\tdrop.addEventListener(\"drop\", function(e) {\n\t\t\te.preventDefault();\n\t\t\te.target.className = \"LinkCtrl_FileDrop\";\n\t\t\tlet files = e.dataTransfer.files;\n\t\t\tlet l = files.length;\n\t\t\tlet valid = [];\n\t\t\tlet formatSupported = this.Accept.split(\",\"); //Generate an array of accepted formats\n\t\t\tfor(let i=0; i<l; i++) { //Loop the incoming files\n\t\t\t\tformatSupported.forEach(function(format) {\n\t\t\t\t\tif(files[i].name.endsWith(format)) {valid.push(files[i])} //Select only the files with supported format\n\t\t\t\t});\n\t\t\t}\n\t\t\tlet v = valid.length;\n\t\t\tlet msg = \"\";\n\t\t\tif(v == 0) {\n\t\t\t\tmsg = \"No valid files found. Supported formats: \" + this.Accept;\n\t\t\t\tthis.setValue([]);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlet diff = l - v; //Number of rejected files\n\t\t\t\tif(diff > 0) { //At least one file rejected\n\t\t\t\t\tif(diff > 1) {msg = diff + \" files with unauthorized format were rejected\"}\n\t\t\t\t\telse {msg = \"A file with unauthorized format was rejected\"}\n\t\t\t\t}\n\t\t\t\tif(this.Multiple == true) {this.setValue(valid)} //Multiple files allowed\n\t\t\t\telse { //Single file allowed\n\t\t\t\t\tif(valid.length > 1) {\n\t\t\t\t\t\tif(msg.length > 0) {msg += \".<br>\"}\n\t\t\t\t\t\tmsg += \"Only one file allowed! The first valid file was added\";\n\t\t\t\t\t}\n\t\t\t\t\tthis.setValue([valid[0]]);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif(msg.length > 0) {\n\t\t\t\te.target.innerHTML = LinkCtrl_File.dropMsg(msg) ;\n\t\t\t\te.target.className = \"LinkCtrl_FileDrop LinkCtrl_FileDropError\";\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlet plural = \"\";\n\t\t\t\tif (v > 1) {plural = \"s\"}\n\t\t\t\te.target.innerHTML = LinkCtrl_File.dropMsg(v + \" file\" + plural + \" added\") ;\n\t\t\t\te.target.className = \"LinkCtrl_FileDrop LinkCtrl_FileDropSuccess\";\n\t\t\t}\n\t\t}.bind(this));\n\t}\n\tupdateValue(v, ui) { //Update the value of the html control, following value change. v is the new value, ui refers to the hosting element. Note that this couldn't be tested properly (FileList object makes trouble)\n\t\tthis.Value = v;\n\t\tif(ui) {\n\t\t\t//ui.children[0].value = v; //The value of the hidden input is updated\n\t\t\tui.nextElementSibling.remove();\n\t\t\tui.insertAdjacentHTML(\"afterend\", this.fileInfo());\n\t\t\tlet drop = ui.nextElementSibling.nextElementSibling; //The drop box\n\t\t\tdrop.className = \"LinkCtrl_FileDrop\"; //Reset the style of the drop box\n\t\t\tdrop.innerHTML = LinkCtrl_File.dropMsg(this.DragMsg); //Also reset the drop msg\n\t\t}\n\t}\n\tfileInfo() { //Returns an html string indicating the file(s) selected\n\t\tlet html = \"<span\"; //Area to display the file selected\n\t\tlet v = this.Value; //Array of selected files\n\t\tlet l = v.length;\n\t\tif(l == 0) {return html + \" style=\\\"color: salmon;\\\">&nbsp;No files selected</span>\"} //No files selected, exit here\n\t\tif(l == 1) {html += \">&nbsp;\" + v[0].name} //Only one file: display the full name\n\t\telse { //Multiple files: display the number of files selected, the details go into the title attribute\n\t\t\tlet title = \" title=\\\"\";\n\t\t\tfor(let i=0;i<l;i++) { //FileCollection has no forEach available\n\t\t\t\tif(i>0) {title += \", \"}\n\t\t\t\ttitle += v[i].name;\n\t\t\t}\n\t\t\thtml += title + \"\\\">&nbsp;\" + l + \" Files selected.\";\n\t\t}\n\t\thtml += \"</span>\";\n\t\treturn html;\n\t}\n}","//************************************************************************************\n// LINKCTRL_NUMBER object - Extension of the HTML5 number input for better interaction\n//************************************************************************************\nclass LinkCtrl_Number extends LinkCtrl {\n\tconstructor(I) {\n\t\tsuper(I); //Call the super class constructor and pass in the input object\n\t\tthis.Type = \"Number\";\n\t\tthis.Size = (I.Size || 5); //Size of the control\n\t\tthis.Min = (I.Min || -Infinity); //Minimum value accepted\n\t\tthis.Max = (I.Max || Infinity); //Maximum value accepted\n\t\tthis.Step = (I.Step || \"any\"); //How much to increment between each step\n\t\treturn this;\n\t}\n\t//Methods\n\thtml() { //Initialize the html for the control\n\t\tvar html = \"<label id=\\\"\" + this.Me + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl\" + this.Classes + \"\\\">\"; //Opening label for the control\n\t\tif(this.ControlLeft) { //The control is first, the label after\n\t\t\thtml += this.htmlInput(); //Add the input\n\t\t\tif(this.HasLabel) {html += \"&nbsp;\" + this.Label} //Add the label\n\t\t}\n\t\telse { //The other way around\n\t\t\tif(this.HasLabel) {html += this.Label + \"&nbsp;\"} //Add the label\n\t\t\thtml += this.htmlInput(); //Add the input\n\t\t}\n\t\thtml += \"</label>\"; //Closure of the control\n\t\tif(this.NewLine) {html += \"<br>\"} //Newline after this control if needed\n\t\treturn html;\n\t}\n\thtmlInput() { //Html for the input per se\n\t\tvar html = \"<input type=\\\"number\\\" id=\\\"\" + this.Control + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl_Number\\\" value=\\\"\" + this.Value + \"\\\" style=\\\"width: \" + this.Size + \"em\\\"\";\n\t\tif(this.Min !== undefined) {html += \" min=\\\"\" + this.Min + \"\\\"\"} //Need to pass the test when min/max = 0, \n\t\tif(this.Max !== undefined) {html += \" max=\\\"\" + this.Max + \"\\\"\"} //\n\t\tif(this.Disabled) {html += \" disabled\"}\n\t\thtml += \" step=\\\"\" + this.Step + \"\\\">\";\n\t\treturn html;\n\t}\n\tbindEvents() { //Bind the events to the control\n\t\tGetId(this.Me).children[0].addEventListener(\"change\", function(e) {\n\t\t\tlet t = e.target;\n\t\t\tvar newVal = Number(t.value);\n\t\t\tlet error = false;\n\t\t\tif(newVal > this.Max) {newVal = this.Max; error = true} //Adjust the value to fit within the Min/Max\n\t\t\tif(newVal < this.Min) {newVal = this.Min; error = true} //\n\t\t\tif(error) {t.style.color = \"red\"}\n\t\t\telse {t.style.color = \"black\"}\n\t\t\tt.value = newVal;\n\t\t\tthis.Value = newVal;\n\t\t\tthis.change(newVal);\n\t\t}.bind(this));\n\t}\n\tupdateValue(v, ui) { //Update the value of the html control, following value change. v is the new value, ui refers to the hosting element\n\t\tlet val = Number(v);\n\t\tif(val > this.Max) {val = this.Max}\n\t\tif(val < this.Min) {val = this.Min}\n\t\tthis.Value = val;\n\t\tif(ui) {ui.children[0].value = val}\n\t}\n\tsetMin(min) { //Update the minimum accepted for this control\n\t\tthis.Min = min;\n\t\tif(this.Value < min) {this.setValue(min)}\n\t\tlet me = GetId(this.Control);\n\t\tif(me) {me.min = min}\n\t\treturn this;\n\t}\n\tsetMax(max) { //Update the maximum accepted for this control\n\t\tthis.Max = max;\n\t\tif(this.Value > max) {this.setValue(max)}\n\t\tlet me = GetId(this.Control);\n\t\tif(me) {me.max = max}\n\t\treturn this;\n\t}\n\tdisable() { //Disable the control\n\t\tthis.Disabled = true;\n\t\tlet me = GetId(this.Me);\n\t\tif(me) {\n\t\t\tme.children[0].disabled = true;\n\t\t\tme.classList.replace(\"LinkCtrl_Resting\", \"LinkCtrl_Disabled\");\n\t\t}\n\t\treturn this;\n\t}\n\tenable() { //Enable the control\n\t\tthis.Disabled = false;\n\t\tlet me = GetId(this.Me);\n\t\tif(me) {\n\t\t\tme.children[0].disabled = false;\n\t\t\tme.classList.replace(\"LinkCtrl_Disabled\", \"LinkCtrl_Resting\");\n\t\t}\n\t}\n}","//////////////////////////////////////////////////////////////////////////////////////////////\n// LINKCTRL_RADIO object - Extension of the HTML radio input for better interaction //////////\n//////////////////////////////////////////////////////////////////////////////////////////////\nclass LinkCtrl_Radio extends LinkCtrl {\n\tconstructor(I) {\n\t\tsuper(I); //Call the super class constructor and pass in the input object\n\t\tthis.Type = \"Radio\";\n\t\tthis.List = (I.List || []);\n\t\treturn this;\n\t}\n\t//Getter\n\tget Selected() { //Return the name of the selected item; use .Value to get its index\n\t\treturn this.List[this.Value];\n\t}\n\t//Methods\n\thtml() {\n\t\tlet html = \"<span id=\\\"\" + this.Me + \"\\\" title=\\\"\" + this.Title + \"\\\">\"; //Wrapper\n\t\tlet label = this.HasLabel;\n\t\tif(label) {html += \"<span class=\\\"LinkCtrl\" + this.getClass({LeftOnly: true}) + \"\\\">\" + this.Label + \"</span>\"}\n\t\tthis.List.forEach(function(l, i) {\n\t\t\tlet checked = \"\";\n\t\t\tif(this.Value == i) {checked = \"checked\"} //Active choice\n\t\t\thtml += \"<label for=\\\"\" + this.Control + \"_\" + i + \"\\\" class=\\\"LinkCtrl\" + this.classes(i, label) + \"\\\">\"; //Opening the label\n\t\t\tif(this.ControlLeft) { //Input first, then label\n\t\t\t\thtml += \"<input type=\\\"radio\\\" id=\\\"\" + this.Control + \"_\" + i + \"\\\" name=\\\"\" + this.Control + \"\\\" \" + checked + \" itemNb=\\\"\" + i + \"\\\">\";\n\t\t\t\thtml += l;\n\t\t\t}\n\t\t\telse { //The other way around\n\t\t\t\thtml += l;\n\t\t\t\thtml += \"<input type=\\\"radio\\\" id=\\\"\" + this.Control + \"_\" + i + \"\\\" name=\\\"\" + this.Control + \"\\\" \" + checked + \" itemNb=\\\"\" + i + \"\\\">\";\n\t\t\t}\n\t\t\thtml += \"</label>\"; //Closing the label\n\t\t}, this);\n\t\thtml += \"</span>\";\n\t\tif(this.NewLine) {html += \"<br>\"} //Newline after this control if needed\n\t\treturn html;\n\t}\n\tbindEvents() { //Bind the events to the control\n\t\tlet labels = GetId(this.Me).children; //Note that this is an HTML collection, not an array\n\t\tlet l = labels.length;\n\t\tlet start = 0;\n\t\tlet i = 0;\n\t\tif(this.HasLabel) { //The first span will allow cycling between the values when clicked\n\t\t\tlabels[0].addEventListener(\"click\", function(e) {\n\t\t\t\tlet l = this.List.length;\n\t\t\t\tlet newValue = this.Value + 1;\n\t\t\t\tif(newValue < l) {this.setValue(newValue).change(newValue)}\n\t\t\t\telse {this.setValue(0).change(0)}\n\t\t\t}.bind(this));\n\t\t\ti++;\n\t\t} \n\t\twhile(i<l) {\n\t\t\tlabels.item(i).children[0].addEventListener(\"click\", function(e) {\n\t\t\t\tlet selected = Number(e.target.getAttribute(\"itemNb\"));\n\t\t\t\tthis.updateValue(selected, e.target.parentElement.parentElement);\n\t\t\t\tthis.change(selected);\n\t\t\t}.bind(this));\n\t\t\ti++;\n\t\t}\n\t}\n\tupdateValue(v, ui) { //Update the value of the html control, following value change. v is the new value, ui refers to the hosting element\n\t\tlet index = Number(v);\n\t\tif(isNaN(index) || index < 0 || index >= this.List.length) {console.warn(\"Could not update Radio control with the value given (\" + index + \")\"); return} //If the value provided is fucked up, alert and exit\n\t\tif(ui) {\n\t\t\tlet label = ui.children.item(index); //The label for the element to select\n\t\t\tif(this.HasLabel) {label = ui.children.item(index + 1)} //Ignore the header\n\t\t\tif(label) {\n\t\t\t\tlet oldLabel = ui.children.item(this.Value);\n\t\t\t\tif(this.HasLabel) {oldLabel = ui.children.item(this.Value + 1)}\n\t\t\t\tif(oldLabel) { //May happen that nothing is selected, depending on the value passed at creation of the control\n\t\t\t\t\toldLabel.children[0].checked = false;\n\t\t\t\t\toldLabel.classList.replace(\"LinkCtrl_Active\", \"LinkCtrl_Resting\");\n\t\t\t\t}\n\t\t\t\tlabel.children[0].checked = true;\n\t\t\t\tlabel.classList.replace(\"LinkCtrl_Resting\", \"LinkCtrl_Active\");\n\t\t\t}\n\t\t}\n\t\tthis.Value = index;\n\t}\n\tclasses(i, label) { //Returns a text representing the classes to be added to the label hosting the control at index i.\n\t\tlet txt = \" LinkCtrl_Resting\";\n\t\tif(this.Value == i) { //Active choice\n\t\t\ttxt = \" LinkCtrl_Active\";\n\t\t}\n\t\tif(i == 0 && label == false) {txt += \" LinkCtrl_RoundL\"} //First choice with no label\n\t\tif(i == this.List.length - 1) {txt += \" LinkCtrl_RoundR\"} //last choice\n\t\treturn txt;\n\t}\n}","//***********************************************************************************\n// LINKCTRL_SELECT object - Extension of the HTML select input for better interaction\n//***********************************************************************************\nclass LinkCtrl_Select extends LinkCtrl {\n\tconstructor(I) {\n\t\tsuper(I); //Call the super class constructor and pass in the input object\n\t\tthis.Type = \"Select\";\n\t\tthis.List = (I.List || []); //List of available options in the select element\n\t\tthis.NavBar = I.NavBar; //Whether to add navBar elements to this select\n\t\tif(I.Lookup) {\n\t\t\tthis.Lookup = {Active: false, Query: \"\", Values: [], LastVisited: 0}\n\t\t}\n\t\treturn this;\n\t}\n\t//Getter\n\tget Selected() { //Return the name of the selected item; use .getValue() to get its index\n\t\treturn this.List[this.Value];\n\t}\n\t//Methods\n\thtml() { //Initialize the html for the control\n\t\tlet html = \"\";\n\t\tif(this.NavBar) { //Add navigation elements\n\t\t\tlet middle = this.getClass({ForceMiddle: true});\n\t\t\thtml += \"<span style=\\\"white-space: pre\\\">\"; //Wrapping span\n\t\t\t\thtml += \"<span class=\\\"LinkCtrl\" + this.getClass({LeftOnly: true}) + \"\\\" title=\\\"Move to the first element\\\" style=\\\"padding: 0.5em 0.2em;\\\">\" + LinkCtrl.icon({Type: \"First\"}) + \"</span>\"; //First element\n\t\t\t\thtml += \"<span class=\\\"LinkCtrl\" + middle + \"\\\" title=\\\"Move one element backward\\\" style=\\\"border-right: none; border-left: none; padding: 0.5em 0.2em;\\\">\" + LinkCtrl.icon({Type: \"Left\"}) + \"</span>\"; //Go one before\n\t\t\t\thtml += \"<label id=\\\"\" + this.Me + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl\" + middle + \"\\\">\"; //Opening label for the control\n\t\t\t\thtml += this.htmlInternal(); //Select element\n\t\t\t\thtml += \"</label>\"; //Closure of the control\n\t\t\t\thtml += \"<span class=\\\"LinkCtrl\" + middle + \"\\\" title=\\\"Move one element forward\\\" style=\\\"border-right: none; border-left: none; padding: 0.5em 0.2em\\\">\" + LinkCtrl.icon({Type: \"Right\"}) + \"</span>\"; //Go one after\n\t\t\t\thtml += \"<span class=\\\"LinkCtrl\" + this.getClass({RightOnly: true}) + \"\\\" title=\\\"Move to the last element\\\" style=\\\"padding: 0.5em 0.2em\\\">\" + LinkCtrl.icon({Type: \"Last\"}) + \"</span>\"; //Last element\n\t\t\thtml += \"</span>\"; //Closure of the wrapping span\n\t\t}\n\t\telse {\n\t\t\thtml += \"<label id=\\\"\" + this.Me + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl\" + this.Classes + \"\\\">\"; //Opening label for the control\n\t\t\thtml += this.htmlInternal();\n\t\t\thtml += \"</label>\"; //Closure of the control\n\t\t}\n\t\tif(this.NewLine) {html += \"<br>\"} //Newline after this control if needed\n\t\treturn html;\n\t}\n\thtmlInternal() { //The html of the elements within the label. This subfunction is useful here when calling an update of the List within the select\n\t\tlet html = \"\";\n\t\tif(this.ControlLeft) { //The control is first, the label after\n\t\t\thtml += this.htmlInput(); //Add the input\n\t\t\tif(this.HasLabel) {html += \"&nbsp;\" + this.Label} //Add the label\n\t\t}\n\t\telse { //The other way around\n\t\t\tif(this.HasLabel) {html += this.Label + \"&nbsp;\"} //Add the label\n\t\t\thtml += this.htmlInput(); //Add the input\n\t\t}\n\t\tif(this.Lookup) {html += this.htmlLookup()} //Append elements enabling value lookup in the list\n\t\treturn html;\n\t}\n\thtmlInput() { //Html for the input per se\n\t\tlet html = \"<select id=\\\"\" + this.Control + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl_Select\\\">\";\n\t\thtml += this.htmlOptions();\n\t\thtml += \"</select>\";\n\t\treturn html;\n\t}\n\thtmlLookup() { //Html for the lookup icon and element\n\t\tlet html = LinkCtrl.icon({Type: \"Zoom\", Title: \"Click here to search values in the list\", Active: false, Space: true});\n\t\thtml += \"<div class=\\\"LinkCtrl_SelectLookup\\\" style=\\\"display: none\\\">\";\n\t\t\thtml += \"<input type=\\\"text\\\" size=\\\"15\\\" title=\\\"Type your search here and press enter to navigate the results\\\">\"; //Text area for the search\n\t\t\thtml += \"<div style=\\\"line-height: normal; color: black\\\"></div>\"; //output for the result\n\t\thtml += \"</div>\";\n\t\treturn html;\n\t}\n\tbindEvents(I) { //Bind the events to the control\n\t\tlet me = GetId(this.Me);\n\t\tlet select = me.children[0];\n\t\tselect.addEventListener(\"change\", function(e) {\n\t\t\tvar newVal = e.target.selectedIndex;\n\t\t\tthis.Value = newVal;\n\t\t\tthis.change(newVal);\n\t\t}.bind(this));\n\t\tif(this.Lookup) { //Below events are for the lookup items\n\t\t\tlet lookup = me.children[1];\n\t\t\tlet div = me.children[2];\n\t\t\tlet text = div.children[0];\n\t\t\tlet out = div.children[1];\n\t\t\tlet timeout = undefined;\n\t\t\tlookup.addEventListener(\"click\", function(e) { //Handle for the visibility of the search bar\n\t\t\t\tlet s = div.style;\n\t\t\t\tif(this.Lookup.Active == false) { //Make div visible\n\t\t\t\t\tlookup.classList.replace(\"LinkCtrl_IconResting\", \"LinkCtrl_IconActive\"); //Other classes must be maintained, so replace is required\n\t\t\t\t\tme.classList.replace(\"LinkCtrl_Resting\", \"LinkCtrl_Active\");\n\t\t\t\t\ts.display = \"block\";\n\t\t\t\t\ts.left = (lookup.offsetLeft - 20) + \"px\";\n\t\t\t\t\tthis.Lookup = {Active: true, Values: [], LastVisited: 0, Query: \"\"}\n//**********************************************************************************************\n//We need to wait until the function has run and the browser updated the visibility of the input\n//before trying to set the focus, otherwise it will happen on an invisible element and fail...\n\t\t\t\t\twindow.setTimeout(function() {text.focus()}, 0);\n//**********************************************************************************************\n\t\t\t\t}\n\t\t\t\telse { //Hide the div\n\t\t\t\t\tthis.Lookup.Active = false;\n\t\t\t\t\ts.display = \"none\";\n\t\t\t\t\tlookup.classList.replace(\"LinkCtrl_IconActive\", \"LinkCtrl_IconResting\"); //Other classes must be maintained, so replace is required\n\t\t\t\t\tme.classList.replace(\"LinkCtrl_Active\", \"LinkCtrl_Resting\");\n\t\t\t\t\ttext.value = \"\";    //Reset the fields\n\t\t\t\t\tout.innerHTML = \"\"; //\n\t\t\t\t}\n\t\t\t}.bind(this));\n\t\t\ttext.addEventListener(\"keyup\", function(e) { //Handle for the lookup\n\t\t\t\tlet LU = this.Lookup;\n\t\t\t\tlet query = text.value;\n\t\t\t\tif(query == \"\") {out.innerHTML = \"\"; return} //No query, do nothing\n\t\t\t\tif(e.key == \"Enter\") { //Reaction when the user press enter\n\t\t\t\t\tif(LU.Values.length == 0) {out.innerHTML = \"\"; return} //No values, do nothing\n\t\t\t\t\telse { //loop through the results\n\t\t\t\t\t\tlet item = LU.Values[LU.LastVisited]\n\t\t\t\t\t\tthis.setValue(item).change(item);\n\t\t\t\t\t\tLU.LastVisited++; //Move to the next\n\t\t\t\t\t\tif(LU.LastVisited == LU.Values.length) {LU.LastVisited = 0} //Restart looping from the beginning\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse { //The user is typing, update the element after a short timeout, to prevent overflow\n\t\t\t\t\tLU.Query = query;\n\t\t\t\t\tlet p = new Promise(function(resolve) { //A promise that will resolve when the search is complete\n\t\t\t\t\t\tlet result = [];\n\t\t\t\t\t\tlet RG = new RegExp(query, \"i\"); //Case insensitive search\n\t\t\t\t\t\tthis.List.forEach(function(l, i) {\n\t\t\t\t\t\t\tif(RG.test(l)) {result.push(i)}\n\t\t\t\t\t\t});\n\t\t\t\t\t\tresolve(result);\n\t\t\t\t\t}.bind(this));\n\t\t\t\t\tif(timeout) {clearTimeout(timeout)}\n\t\t\t\t\ttimeout = setTimeout(function() {\n\t\t\t\t\t\tout.innerHTML = \"Searching...\"; //Reset the field\n\t\t\t\t\t\tp.then(function(result) { //Wait for the promise and display the result\n\t\t\t\t\t\t\tLU.Values = result;\n\t\t\t\t\t\t\tLU.LastVisited = 0;\n\t\t\t\t\t\t\tlet l = result.length;\n\t\t\t\t\t\t\tlet msg = \"\";\n\t\t\t\t\t\t\tswitch(l) {\n\t\t\t\t\t\t\t\tcase 0: msg = \"No match!\"; break;\n\t\t\t\t\t\t\t\tcase 1: msg = \"Found 1 match\"; break;\n\t\t\t\t\t\t\t\tdefault: msg = \"Found \" + l + \" matches\"; break;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif(text.value == query) {out.innerHTML = msg} //Only write if the result corresponds to the initial query\n\t\t\t\t\t\t\telse { //Additional protection to remove the 'searching' message if there are no query left\n\t\t\t\t\t\t\t\tif(text.value == \"\") {out.innerHTML = \"\"}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}, 200); //Short time out\n\t\t\t\t}\n\t\t\t}.bind(this));\n\t\t}\n\t\tif(this.NavBar) { //Bind events to the navbar elements\n\t\t\tlet back = me.previousSibling;\n\t\t\tlet first = back.previousSibling;\n\t\t\tlet next = me.nextSibling;\n\t\t\tlet last = next.nextSibling;\n\t\t\tfirst.addEventListener(\"click\", function(e) {this.setValue(0).change(0)}.bind(this));\n\t\t\tlast.addEventListener(\"click\", function(e) {\n\t\t\t\tlet l = this.List.length - 1;\n\t\t\t\tthis.setValue(l).change(l);\n\t\t\t}.bind(this));\n\t\t\tnext.addEventListener(\"click\", function(e) {\n\t\t\t\tlet l = this.List.length - 1;\n\t\t\t\tlet v = this.Value;\n\t\t\t\tif(v < l) {this.setValue(v + 1).change(v + 1)}\n\t\t\t}.bind(this));\n\t\t\tback.addEventListener(\"click\", function(e) {\n\t\t\t\tlet v = this.Value;\n\t\t\t\tif(v > 0) {this.setValue(v - 1).change(v - 1)}\n\t\t\t}.bind(this));\n\t\t}\n\t\treturn this;\n\t}\n\tupdateValue(v, ui) { //Update the value of the html control, following value change. v is the new value, ui refers to the hosting element\n\t\tthis.Value = v;\n\t\tif(ui) {ui.children[0].selectedIndex = v}\n\t\treturn this;\n\t}\n\thtmlOptions() { //Returns an html string to populate a select control with available elements in the list\n\t\tvar html = \"\";\n\t\tvar selected = \"\";\n\t\tthis.List.forEach(function(a, i) {\n\t\t\tif(i == this.Value) {selected = \"selected\"}\n\t\t\telse {selected = \"\"}\n\t\t\thtml += \"<option value=\\\"\" + i + \"\\\" \" + selected + \">\" + a + \"</option>\";\n\t\t}, this);\n\t\treturn html;\n\t}\n\tupdateList(list) { //Update the control with a new list provided in input as an array\n\t\tthis.List = list;\n\t\tif(this.Value >= list.length) {this.Value = list.length - 1} //Less items than before, rebase to be at the highest possible\n\t\tlet select = GetId(this.Control);\n\t\tif(select === null) {return this} //No control on the page means no html to update\n\t\tselect.innerHTML = this.htmlOptions(); //Re-create the html using the updated list\n\t\treturn this;\n\t}\n\tdisable() { //Disable the select\n\t\tvar me = GetId(this.Me);\n\t\tif(me === null) {return this} //No control on the page means nothing else to update\n\t\tme.children[0].disabled = true;\n\t\tif(this.NavBar) {\n\t\t\t//Disable NavBar elements\n\t\t}\n\t\treturn this;\n\t}\n}","//*******************************************************************************\n// LINKCTRL_TEXT object - Extension of the HTML text input for better interaction\n//*******************************************************************************\nclass LinkCtrl_Text extends LinkCtrl {\n\tconstructor(I) {\n\t\tsuper(I); //Call the super class constructor and pass in the input object\n\t\tthis.Type = \"Text\";\n\t\tthis.Size = (I.Size || 12);\n\t\treturn this;\n\t}\n\t//Methods\n\thtml() { //Initialize the html for the control\n\t\tvar html = \"<label id=\\\"\" + this.Me + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl\" + this.Classes + \"\\\">\"; //Opening label for the control\n\t\tif(this.ControlLeft) { //The control is first, the label after\n\t\t\thtml += \"<input type=\\\"text\\\" id=\\\"\" + this.Control + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl_Text\\\" value=\\\"\" + this.Value + \"\\\" size=\\\"\" + this.Size + \"\\\">\";\n\t\t\tif(this.HasLabel) {html += \"&nbsp;\" + this.Label} //Add the label\n\t\t}\n\t\telse { //The other way around\n\t\t\tif(this.HasLabel) {html += this.Label + \"&nbsp;\"} //Add the label\n\t\t\thtml += \"<input type=\\\"text\\\" id=\\\"\" + this.Control + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl_Text\\\" value=\\\"\" + this.Value + \"\\\" size=\\\"\" + this.Size + \"\\\">\";\n\t\t}\n\t\thtml += \"</label>\"; //Closure of the control\n\t\tif(this.NewLine) {html += \"<br>\"} //Newline after this control if needed\n\t\treturn html;\n\t}\n\tbindEvents() { //Bind the events to the control\n\t\tGetId(this.Me).children[0].addEventListener(\"change\", function(e) {\n\t\t\tvar newVal = e.target.value;\n\t\t\tthis.Value = newVal;\n\t\t\tthis.change(newVal);\n\t\t}.bind(this));\n\t}\n\tupdateValue(v, ui) { //Update the value of the html control, following value change. v is the new value, ui refers to the jquery of the hosting element\n\t\tthis.Value = v;\n\t\tif(ui) {ui.children[0].value = v}\n\t}\n}","//***************************************************************************************\n// LINKCTRL_TEXTAREA object - Extension of the HTML textarea input for better interaction\n//***************************************************************************************\nclass LinkCtrl_TextArea extends LinkCtrl {\n\tconstructor(I) {\n\t\tsuper(I); //Call the super class constructor and pass in the input object\n\t\tthis.Type = \"TextArea\";\n\t\treturn this;\n\t}\n\t//Methods\n\thtml() { //Initialize the html for the control\n\t\tlet html = \"<textarea id=\\\"\" + this.Me + \"\\\" title=\\\"\" + this.Title + \"\\\" class=\\\"LinkCtrl_Round LinkCtrl_TextArea\";\n\t\tif(this.Disabled) {html += \" LinkCtrl_TextAreaDisabled\\\"\"}\n\t\telse {html += \" LinkCtrl_TextAreaEnabled\\\"\"}\n\t\tif(this.Disabled) {html += \" disabled\"}\n\t\thtml += \" value=\\\"\" + this.Value + \"\\\">\" + this.Value + \"</textarea>\"; //For textarea, default value on init should be within the node\n\t\tif(this.NewLine) {html += \"<br>\"} //Newline after this control if needed\n\t\treturn html;\n\t}\n\tbindEvents() { //Bind the events to the control\n\t\tGetId(this.Me).addEventListener(\"change\", function(e) {\n\t\t\tvar newVal = e.target.value;\n\t\t\tthis.Value = newVal;\n\t\t\tthis.change(newVal);\n\t\t}.bind(this));\n\t\treturn this;\n\t}\n\tupdateValue(v, ui) { //Update the value of the html control, following value change. v is the new value, ui refers to the jquery of the hosting element\n\t\tthis.Value = v;\n\t\tif(ui) {ui.value = v}\n\t\treturn this;\n\t}\n\tdisable() { //Disable the textarea\n\t\tlet me = GetId(this.Me);\n\t\tif(me) {\n\t\t\tme.disabled = true;\n\t\t\tme.classList.replace(\"LinkCtrl_TextAreaEnabled\", \"LinkCtrl_TextAreaDisabled\");\n\t\t}\n\t\treturn this;\n\t}\n}"]}